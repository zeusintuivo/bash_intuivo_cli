#!/usr/bin/env bash


#
# C H E C K   H O W   C O M P U T E R   H A N D L E S   E R R O R S   --Start
#
test_positives(){
  KIND=""
  local -i _err=0
  if ls werwerwerwerwerwerwerwerwerwerwerr >/dev/null 2>&1; then
    _err=$?
    if (( _err == 0 )) ;  then  # Intel processor
      KIND="INTEL"
    fi
    if [ $_err == 0 ]; then   # Mac Intel processor
      KIND="${KIND}MAC"
    fi
  else
    if (( _err == 0 )) ;  then  # Intel processor
      KIND="INTEL"
    fi
    if [ $_err == 0 ]; then   # Mac Intel processor
      KIND="${KIND}MAC"
    fi
  fi
  echo "${KIND}"
}
PROCESSOR_ERROR=$(test_positives)
# DEBUG MACPOSITIVE MACPOSITIVE echo "${PROCESSOR_ERROR}"
# DEBUG MACPOSITIVE exit 1
#
# C H E C K   H O W   C O M P U T E R   H A N D L E S   E R R O R S   --End
#

#
# C H E C K   R E P L A C E   F U N C T I O N S   I N S T A L L E D  --Start
#
check_replacer () {
  local REPLACER="$1"
  if command -v "${REPLACER}" >/dev/null 2>&1; then
    # It looks installed
    # .. is it working properly
    # msg_green " ${1} INSTALLED."

    #stdout UND stderr -capture  REF: https://www.thomas-krenn.com/de/wiki/Bash_stdout_und_stderr_umleiten
    ${REPLACER}  --version &> /tmp/ersetze_test_${REPLACER}.txt
    # shellcheck disable=SC2155
    local PROPERLYWORKING=$(cat /tmp/ersetze_test_${REPLACER}.txt)

    if [[ "$PROPERLYWORKING" == *"dyld:"* ]]; then { echo "error"; return;} fi
    if [[ "$PROPERLYWORKING" == *"GNU"* ]]; then { echo "GNU"; return;} else { echo "MAC";return;} fi
    echo "checked";
    return;
  else
    # msg_red "${GREEN} ${RED} CANNOT REPLACE ...${1} IS MISSING ";
    # msg_red " NEED TO INSTALL ${1}.       Linux:    sudo apt-get install ${1}         Mac:     brew install ${1}   "
    echo "install";
    return;
  fi
}
function msg_install() {
  msg_red "${GREEN} ${RED} CANNOT REPLACE ...${1} IS MISSING ";
  msg_red " NEED TO INSTALL ${1}.       Linux:    sudo apt-get install ${1}         Mac:     brew install ${1}   "
}
# REPLACER="sed";
# Try vim's ex ..broke here grrr TODO research how to implement doing erestese_indatei /images/projects/ images/projects index.html did not work at all
REPLACER="sed"; # changed to sed
VALIDREPLACER=$(check_replacer "${REPLACER}")


if [[ $VALIDREPLACER == "error" ]] ; then
  msg_red "Error with replacer ${REPLACER}"
  msg_red " - Error:"
  cat /tmp/ersetze_test_${REPLACER}.txt
   rm /tmp/ersetze_test_${REPLACER}.txt
fi

if [[ $VALIDREPLACER == "install" ]] ; then
  msg_install "${REPLACER}"
fi
rm /tmp/ersetze_test_${REPLACER}.txt

# TODO - Remove Repetition HERE
# ? empty still
if [[ $VALIDREPLACER == "install" || $VALIDREPLACER == "error"  ]] ; then
  REPLACER="sed";
  VALIDREPLACER=$(check_replacer "${REPLACER}")

  if [[ $VALIDREPLACER == "error" ]] ; then
    msg_red "Error with replacer ${REPLACER}"
    msg_red " - Error:"
    cat /tmp/ersetze_test_${REPLACER}.txt
     rm /tmp/ersetze_test_${REPLACER}.txt
    exit 1;
  fi

  if [[ $VALIDREPLACER == "install" ]] ; then
    msg_install "${REPLACER}"
    rm /tmp/ersetze_test_${REPLACER}.txt
    exit 1;
  fi
fi



REPLACERGNU="NO"
if [[ $VALIDREPLACER == "GNU" ]] ; then
{
  REPLACERGNU="YES"
}
fi


# one more check for gsed from brew in macs
if [[ $REPLACERGNU == "NO" ]] ; then
{  
  if command -v gsed >/dev/null 2>&1 ; then 
  { 
    REPLACERGNU="YES"
    REPLACER="gsed"
  }
  fi
}
fi


# Test
# echo "REPLACERGNU: $REPLACERGNU"
# echo "VALIDREPLACER: $VALIDREPLACER"
# exit
# C H E C K   R E P L A C E   F U N C T I O N S   I N S T A L L E D  -- RESULTS
# Results as
#             $REPLACERGNU  NO OR YES
#             $REPLACERGNU  ex or sed
#             halts execution if not found
#
# C H E C K   R E P L A C E   F U N C T I O N S   I N S T A L L E D  -- End



[ -z ${1-} ] && echo "Expected at least one parameter for filename to observe!." && exit 1
typeset cwd=$(pwd | sed 's@/@\\/@g')
function file_extension() {
  #
  # Outputs the file extension given a file name
  #
  # $1 = Filename.ext:linenummer
  #
  # Usage: extension=$(file_extension "foo/bar.baz")
  #   Result: $extension ==> "baz"
  #
  #
  local test_value=$(echo "${1##*.}")
  if [[ "${test_value}" == *":"* ]] ; then
  {
    echo "${test_value}" | cut -d":" -f1
  }
  else
  {
    echo "${test_value}"
  }
  fi
} # end file_extension

function _trap_on_INT(){
  local -ir __trapped_INT_num="${2:-0}"
  echo -e "\\n \033[01;7m*** 7 INT TRAP $THISSCRIPTNAME \\n${BASH_SOURCE}:${BASH_LINENO[-0]} ${FUNCNAME[1]}() \\n$0:${BASH_LINENO[1]} ${FUNCNAME[2]}()  \\n$0:${BASH_LINENO[2]} ${FUNCNAME[3]}() \\n INT ...\033[0m  \n \n "
  echo ". ${1}"
  echo ". INT  ${__trapped_INT_num}  "
  echo ". caller $(caller) "
  echo ". ${BASH_COMMAND}"
  local -r __caller=$(caller)
  local -ir __caller_line=$(echo "${__caller}" | cut -d' ' -f1)
  local -r __caller_script_name=$(echo "${__caller}" | cut -d' ' -f2)
  awk 'NR>L-10 && NR<L+10 { printf "%-10d%10s%s\n",NR,(NR==L?"☠ » » » > ":""),$0 }' L="${__caller_line}" "${__caller_script_name}"

  # $(eval ${BASH_COMMAND}  2>&1; )
  # echo -e " ☠ ${LIGHTPINK} Offending message:  ${__bash_error} ${RESET}"  >&2
  exit ${__trapped_INT_num}
}
# trap  '_trap_on_INT $0 "${?}" LINENO BASH_LINENO FUNCNAME BASH_COMMAND $FUNCNAME $BASH_LINENO $LINENO   $BASH_COMMAND'  INT ERR



file_to_observe="${1-}"
extension_to_observe=$(file_extension "${1-}")
extra_args_to_run="${*:2}"
prefix_to_observe=""
if [[ "${extension_to_observe-}" == "go" ]] || [[ "${extension_to_observe-}" == "GO" ]] ; then
{
	# ps aux | grep "${1-}" | head -1 |xargs
	prefix_to_observe="[[ -n \\\"\$(ps aux | grep \\\"${1-}\\\" | grep -v 'grep'  | head -1 | xargs)\\\"  ]] || kill \\\"\$(ps aux | grep \\\"${1-}\\\" | grep -v 'grep'  | head -1 | xargs | cut -d' ' -f2 )\\\" || go run \\\"$(pwd)/${*}\\\" && go run "
}
fi
echo "extension_to_observe:${extension_to_observe-}"
echo "   prefix_to_observe:${prefix_to_observe-}"
echo "     file_to_observe:${file_to_observe-}"
echo "   extra_args_to_run:${extra_args_to_run-}"

if [[ $REPLACERGNU == "YES" ]] ; then
{  
  if [[ -n "${extra_args_to_run}" ]] ; then 
  {
    echo "nodemon --watch \"${file_to_observe}\" --ext ${extension_to_observe} --exec \"${extra_args_to_run} ${file_to_observe}\"  "

    nodemon --watch "${file_to_observe}" --ext ${extension_to_observe} --spawn --exec "${extra_args_to_run} ${file_to_observe}" 2>&1  \
    | ${REPLACER} --unbuffered 's/\ on\ line\ /:/g' \
    | ${REPLACER} --unbuffered 's/:\ line\ /:/g' \
    | ${REPLACER} --unbuffered 's/\ No\ such\ file\ or\ directory\ in\ /\ in\ \o033[38;5;213m/g' \
    | ${REPLACER} --unbuffered 's/ErrorException:\ /\o033[38;5;196mErrorException:\ \o033[38;5;213m/g' \
     | ${REPLACER} --unbuffered "s/\ require_once(.\/wp-content/\ require_once(\n$cwd\/wp-content/g" \
     | ${REPLACER} --unbuffered "s/\ require(.\/wp-content/\ require(\n$cwd\/wp-content/g" \
     | ${REPLACER} --unbuffered "s/\ require\ .\/wp-content/\ require\ \n$cwd\/wp-content/g" \
     | ${REPLACER} --unbuffered "s/\ include\ .\/wp-content/\ include\ \n$cwd\/wp-content/g" \
     | ${REPLACER} --unbuffered "s/\ include_once(.\/wp-content/\ include_once(\n$cwd\/wp-content/g" \
     | ${REPLACER} --unbuffered "s/\ in\ \//\ in\ \n\//g" \
    | ${REPLACER} --unbuffered 's/Stack\ trace:/\o033[38;0mStack\ trace:/g' \
    | ${REPLACER} --unbuffered 's/Call\ Stack:/\o033[38;0mCall\ Stack:/g' \
    | ${REPLACER} --unbuffered 's/#. //g' \

    # | ${REPLACER} --unbuffered 's@/./@/@g' \

  }
  else
  {
    echo "nodemon --watch \"./\" --ext py,go,bash,sh,kv,php,rb --exec \"${prefix_to_observe-}$(pwd)/${*}\"  "

    nodemon --watch "./" --ext py,go,bash,sh,kv,php,rb --spawn --exec "${prefix_to_observe-}$(pwd)/${*}"  2>&1  \
    | ${REPLACER} --unbuffered 's/\ on\ line\ /:/g' \
    | ${REPLACER} --unbuffered 's/:\ line\ /:/g' \
    | ${REPLACER} --unbuffered 's/\ No\ such\ file\ or\ directory\ in\ /\ in\ \o033[38;5;213m/g' \
    | ${REPLACER} --unbuffered 's/ErrorException:\ /\o033[38;5;196mErrorException:\ \o033[38;5;213m/g' \
     | ${REPLACER} --unbuffered "s/\ require_once(.\/wp-content/\ require_once(\n$cwd\/wp-content/g" \
     | ${REPLACER} --unbuffered "s/\ require(.\/wp-content/\ require(\n$cwd\/wp-content/g" \
     | ${REPLACER} --unbuffered "s/\ require\ .\/wp-content/\ require\ \n$cwd\/wp-content/g" \
     | ${REPLACER} --unbuffered "s/\ include\ .\/wp-content/\ include\ \n$cwd\/wp-content/g" \
     | ${REPLACER} --unbuffered "s/\ include_once(.\/wp-content/\ include_once(\n$cwd\/wp-content/g" \
     | ${REPLACER} --unbuffered "s/\ in\ \//\ in\ \n\//g" \
    | ${REPLACER} --unbuffered 's/Stack\ trace:/\o033[38;0mStack\ trace:/g' \
    | ${REPLACER} --unbuffered 's/Call\ Stack:/\o033[38;0mCall\ Stack:/g' \
    | ${REPLACER} --unbuffered 's/#. //g' \

    # | ${REPLACER} --unbuffered 's@/./@/@g' \

  }
  fi

 
}
else
{
  echo "Error I do not know how to use sed for mac "
}
fi
