#!/bin/bash
#
# @author Zeus Intuivo <zeus@intuivo.com>
#
#
set -Eu

function main() {
  local red="\\033[38;5;1m"
  local reset="\\033[0m"
  function msg_error() {
    echo -e "${red} ERROR ! ${*-} ${reset}"
  }

  local PACKAGE_JSON=""
  if [ ! -f package.json ] ; then
  {
    msg_error "package.json file not found ! Stopping."
    exit 69
  } else {
    PACKAGE_JSON=$(<package.json)
  }
  fi
  local -i JQ_INSTALLED=0
  # check operation systems

  if [[ "$(uname)" == "Darwin" ]] ; then
    # Do something under Mac OS X platform
    # if value is not set  -- exit silent it
    if command -v jq >/dev/null 2>&1; then
    {
        JQ_INSTALLED=1
    }
    else
    {
        msg_error "jq dependency missing ! Attempting to install."
        brew install jq
        wait
        if command -v jq >/dev/null 2>&1; then
        {
          JQ_INSTALLED=1
        }
        else
        {
          msg_error "jq dependency missing ! Attempt to install seem to have failed ! Stopping."
          exit 69
        }
        fi
    }
    fi

  elif [[ "$(cut -c1-5 <<< "$(uname -s)")" == "Linux" ]] ; then
    # Do something under GNU/Linux platform
    if command -v jq >/dev/null 2>&1; then
    {
        JQ_INSTALLED=1
    }
    else
    {
        msg_error "jq dependency missing ! Attempting to install."
        (( command -v dnf >/dev/null 2>&1; )) && sudo dnf install jq
        (( command -v brew >/dev/null 2>&1; )) && brew install jq
        (( command -v apt >/dev/null 2>&1; )) && sudo apt install jq
        wait
        if command -v jq >/dev/null 2>&1; then
        {
          JQ_INSTALLED=1
        }
        else
        {
          msg_error "jq dependency missing ! Attempt to install seem to have failed ! Stopping."
          msg_error "jq dependency missing ! I don't know how to attemp to install in this Linux $(expr substr "$(uname -s)" 1 5)"
          exit 69
        }
        fi
    }
    fi


  elif [[ "$(cut -c1-10 <<< "$(uname -s)")" == "MINGW32_NT" ]] || [[ "$(cut -c1-10 <<< "$(uname -s)")" == "MINGW64_NT" ]] ; then
    # Do something under Windows NT platform
    msg_error "jq dependency missing ! I don't know how to attemp to install in this Windows $(expr substr "$(uname -s)" 1 10)"
    exit 69
    # nothing here
  fi



  # if everything else --

  # check operation systems

  if [[ "$(uname)" == "Darwin" ]] ; then
    # Do something under Mac OS X platform
    local DEPS=""
    DEPS=$(echo """${PACKAGE_JSON}""" | jq -r '.dependencies | keys | .[]' 2> /dev/null ) #  capture all stout sderr ignored
    local DEVDEPS=""
    DEVDEPS=$(echo """${PACKAGE_JSON}""" | jq -r '.devDependencies | keys | .[]' 2> /dev/null ) #  capture all stout sderr ignored
    local OPTDEPS=""
    OPTDEPS=$(echo """${PACKAGE_JSON}""" | jq -r '.optionalDependencies | keys | .[]' 2> /dev/null) #  capture all stout sderr ignored
    local ALLDEPS=""
    ALLDEPS=$(echo -e "${DEPS}\n${DEVDEPS}\n${OPTDEPS}" 2> /dev/null ) #  capture all stout sderr ignored
    local USED=""
    local NOTUSED=""
    local TESTREQUIRE=""
    local TESTIMPORT=""
    local dep=""
    for dep in ${ALLDEPS}; do
      if [[ -n "${dep}" ]] ; then
      {
        echo -e "require(*$dep*)"
        TESTREQUIRE=""
        TESTREQUIRE=$(grep "require\(.*$dep.*\)"  -Rl . )
        if [[  -n "${TEST}" ]] ; then
        {
          USED=$(echo -e "${USED}\n${TESTREQUIRE}")
        }
        fi
        TESTREQUIRE=$(grep "require\(.*$dep.*\)"  -Rl . )
        if [[ -n "${TEST}" ]] ; then
        {
          USED=$(echo -e "${USED}\n${TESTREQUIRE}")
        }
        fi

        if [[ -z "${TESTREQUIRE}" ]] && [[ -z "${TESTIMPORT}" ]] ; then
        {
          NOTUSED=$(echo -e "${NOTUSED}\n${dep}")
        }
        fi
        echo 'import { colorConvert } from "./utils/color-convert"' | grep -E "from.*$dep.*"
        #grep "*$dep*" -Rq --exclude-dir="node_modules" .
        # ü "$dep"
        # if ( ; then
        #{
        #  echo "Found as require ${dep}"
        #}
        #fi
        #if ( grep "from \.*$dep.*" -Rq --exclude-dir="node_modules" . ) ; then
        #{
        #  echo "Found as import ${dep}"
        #}
        #fi

      }
      fi
    done

  elif [[ "$(cut -c1-5 <<< "$(uname -s)")" == "Linux" ]] ; then
    # Do something under GNU/Linux platform
     local DEPS=""
    DEPS=$(echo """${PACKAGE_JSON}""" | jq -r '.dependencies | keys | .[]' 2> /dev/null ) #  capture all stout sderr ignored
    local DEVDEPS=""
    DEVDEPS=$(echo """${PACKAGE_JSON}""" | jq -r '.devDependencies | keys | .[]' 2> /dev/null ) #  capture all stout sderr ignored
    local OPTDEPS=""
    OPTDEPS=$(echo """${PACKAGE_JSON}""" | jq -r '.optionalDependencies | keys | .[]' 2> /dev/null) #  capture all stout sderr ignored
    local ALLDEPS=""
    ALLDEPS=$(echo -e "${DEPS}\n${DEVDEPS}\n${OPTDEPS}" 2> /dev/null ) #  capture all stout sderr ignored
    local USED=""
    local NOTUSED=""
    local TESTREQUIRE=""
    local TESTIMPORT=""
    local dep=""
    for dep in ${ALLDEPS}; do
      if [[ -n "${dep}" ]] ; then
      {
        echo -e "checking require(*$dep*)"
        echo 'import { colorConvert } from "./utils/color-convert"' | grep -E "from.*$dep.*"
        TESTREQUIRE=$(grep "require\(.*$dep.*\)"  -Rl . )
        if [[  -n "${TESTREQUIRE}" ]] ; then
        {
          USED=$(echo -e "  \\____ ${USED}\n${TESTREQUIRE}")
        }
        fi
        TESTREQUIRE=$(grep "require\(.*$dep.*\)"  -Rl . )
        if [[ -n "${TESTREQUIRE}" ]] ; then
        {
          USED=$(echo -e "  \\____ ${USED}\n${TESTREQUIRE}")
        }
        fi

        if [[ -z "${TESTREQUIRE}" ]] && [[ -z "${TESTIMPORT}" ]] ; then
        {
          NOTUSED=$(echo -e "  -________ ${NOTUSED}\n${dep}")
        }
        fi
        #grep "*$dep*" -Rq --exclude-dir="node_modules" .
        # ü "$dep"
        # if ( ; then
        #{
        #  echo "Found as require ${dep}"
        #}
        #fi
        #if ( grep "from \.*$dep.*" -Rq --exclude-dir="node_modules" . ) ; then
        #{
        #  echo "Found as import ${dep}"
        #}
        #fi

      }
      fi
    done


  elif [[ "$(cut -c1-10 <<< "$(uname -s)")" == "MINGW32_NT" ]] || [[ "$(cut -c1-10 <<< "$(uname -s)")" == "MINGW64_NT" ]] ; then
    # Do something under Windows NT platform
    echo "nothing to do sed 's/'"""${SEEKING-}"""'//g' ;"
    # nothing here
  fi
  echo "Used:"
  echo "$USED"
  echo "Not Used"
  echo "$NOTUSED"
} # end main

main "${*-}"
