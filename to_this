#!/usr/bin/env bash
#!/bin/bash
#
LIGHTPINK="\033[1;204m"
YELLOW_OVER_DARKBLUE="\033[38;5;220m\033[48;5;20m"
RESET="\033[0m"
        function kill() {
            echo -e " ☠ ${LIGHTPINK} KILL EXECUTION SIGNAL SEND ${RESET}"
            echo -e " ☠ ${YELLOW_OVER_DARKBLUE}  ${*} ${RESET}"
            exit 69;
        }

MOREIGNORE_FILES=""
[ -f .ersetzeignore_files ] && MOREIGNORE_FILES=$(<.ersetzeignore_files)
MOREIGNORE_DIRS=""
[ -f .ersetzeignore_dirs ] && MOREIGNORE_DIRS=$(<.ersetzeignore_dirs)
IGNORELIST=""
FILESTOEXCLUDE=".dir_bash_history\n.gitignore\n.ersetzeignore_dirs\n.ersetzeignore_files\n.nurignore_dirs\n.nurignore_files\n.tutorial\nack\nbootstrap.php.cache\nconflicts\ncomposer.phar\ncountalltables\ndBug.php\ngenerateinserts\ngeneratelocations\ngenerateparams\nload_insert\nphpunit\n${MOREIGNORE_FILES}"
DIRSTOEXCLUDE=".cargo\n.nyc_output\n.serverless\n.tmp\n.ecryptfs\n.gvfs\n.git\n.vagrant\n.servo\ncoverage\nAbsoluteUrlBundle\napp/Stubs\nbower_components\ncache\ndist\npython\nstorage/debugbar\nstorage/logs\ntarget\n\nlog\nports\nvar/cache\nvar/logs\nvar/session\napp/cache\napp/logs\napp/session\n${MOREIGNORE_DIRS}"

    while read -r ONE_FILENAME; do
      # if not empty
      if [ ! -z "${ONE_FILENAME}" ] ; then
        IGNORELIST="${IGNORELIST}
${ONE_FILENAME}"
      fi
    done <<< "${FILESTOEXCLUDE}"
    while read -r ONE_DIRNAME; do
      # if not empty
      if [ ! -z "${ONE_DIRNAME}" ] ; then
        IGNORELIST="${IGNORELIST}
${ONE_DIRNAME}"
      fi
    done <<< "${DIRSTOEXCLUDE}"

#  DEBUG one ignore file
# FILESTOEXCLUDE="202008101207_caffeine_guakeupdicator.sh"
# echo "FILESTOEXCLUDE:${FILESTOEXCLUDE}"
# echo "${DIRSTOEXCLUDE}"
function rename_to_this(){
	local from="${1}"
	local to="${2}"
	local ONE_FILE
	local FILES=""
	local ONE_ENTRY
	local NEW_FILENAME
	local ENTRIES=""
	local _error="0"
	local ALLFILES
		(_error="0" && ALLFILES=$(find .)) || (_error="$?" && [ "$_error" = 69 ] && kill To find)
	local ALLFILTERED
		(_error="0" && ALLFILTERED=$(ag -s --nocolor "/.*""${from}""[^/]*$"<<< "${ALLFILES}")) || _error="$?"
		[ "$_error" = 69 ] && kill To filter using ag ${ALLFILTERED}
	local ALLENTRIES
		(_error="0" && ALLENTRIES=$(sed 's/../  /'<<<"${ALLFILTERED}")) || _error="$?"
		[ "$_error" = 69 ] && kill To sed cut chars ${ALLENTRIES}

	# local ALLENTRIES=$(find . | ag -s --nocolor "/.*""${from}""[^/]*$" | sed 's/../  /')
	local one two not_found_in_ignorelist
  # echo "ALLENTRIES: ${ALLENTRIES}"
	[ -z "$ALLENTRIES" ] && echo Nothing found && exit 1
	while read -r two; do
		if [ -n "${two}" ]  ; then # if not empty
			ENTRIES="${ENTRIES}
${two}"
		fi
	done <<< "${ALLENTRIES}"
	local NEWENTRIES=""
  # echo "ENTRIES: ${ENTRIES}"

    while read -r one; do
      if [ -n "${one}" ] && [ -n "${IGNORELIST}" ] ; then # if not empty
	    not_found_in_ignorelist=""
		while read -r two; do
			# echo  "${two}" != "${one}"
			if [ -n "${two}" ] && [ "${two}" == "${one}" ] ; then # if not empty
				not_found_in_ignorelist="1"
				# echo found!
				# else
				# echo should add
			fi
		done <<< "${IGNORELIST}"
		if [ -z "${not_found_in_ignorelist}" ] ; then # is empty
			NEWENTRIES="${NEWENTRIES}
${one}"
		fi
      fi
    done <<< "${ENTRIES}"


	if [ -z "${NEWENTRIES}" ] ; then # if is empty
		echo "Nothing to rename"
		exit 0
	fi
	while read -r ONE_ENTRY; do
	{
		if [ -n "${ONE_ENTRY}" ] ; then # if not empty
	    {
	    	ONE_FILE=$(echo "${ONE_ENTRY}" | cut -d':' -f1)
	    	FILES="${FILES}
${ONE_FILE}"
			NEW_FILENAME=$(echo "${ONE_FILE}" | sed -e s/"${from}"/"${to}"/g)
		  	echo from "${ONE_FILE}" to  "${NEW_FILENAME}"
		  	mv "${ONE_FILE}" "${NEW_FILENAME}"

	    }
	    fi

	}
	done <<< "${NEWENTRIES}"

}

echo rename_to_this $*
rename_to_this $*


