#!/usr/bin/env bash
#!/bin/bash
#
# @author Zeus Intuivo <zeus@intuivo.com>
#
#

load_execute_command_wget(){
    local provider="$HOME/_/clis/execute_command_intuivo_cli/execute_command"
    [   -e "${provider}"  ] && source "${provider}"
    [ ! -e "${provider}"  ] && eval """$(wget --quiet --no-check-certificate  https://raw.githubusercontent.com/zeusintuivo/execute_command_intuivo_cli/master/execute_command -O -  2>/dev/null )"""   # suppress only wget download messages, but keep wget output for variable
    ( ( ! command -v comment >/dev/null 2>&1; ) && echo -e "\\n \\n  ERROR! Loading execute_command \\n \\n " && exit 69; )
} # end load_execute_command_wget
load_execute_command_wget

load_struct_testing_wget(){
    local provider="$HOME/_/clis/execute_command_intuivo_cli/struct_testing"
    [   -e "${provider}"  ] && source "${provider}"
    [ ! -e "${provider}"  ] && eval """$(wget --quiet --no-check-certificate  https://raw.githubusercontent.com/zeusintuivo/execute_command_intuivo_cli/master/struct_testing -O -  2>/dev/null )"""   # suppress only wget download messages, but keep wget output for variable
    ( ( ! command -v passed >/dev/null 2>&1; ) && echo -e "\n \n  ERROR! Loading struct_testing \n \n " && exit 69; )
} # end load_struct_testing_wget
load_struct_testing_wget

SAVEDTEMPKEYS=""
SAVEDLINEONE=""

if it_exists_with_spaces .temp_keys ; then
{
  passed .temp_keys exists already
  comment updating .temp_keys
  source .temp_keys
  SAVEDTEMPKEYS="$(<.temp_keys)"
  USERNAMEGIT=$(git config --local --get user.name)
  # _if_not_contains .temp_keys "SSH_KEY" || echo -e "\nexport SSH_KEY=\"\"          #     \"local name from file 'zeus' or 'mark'\"" >> .temp_keys
}
else
{
  touch .temp_keys
}
fi
  cat << EOF > .temp_keys
# git pull push section
export SSH_KEY="${SSH_KEY}"          # "local name from file 'zeus' or 'mark'"
export GITUSER="${GITUSER}"          # "user name only 'usename' from the github or gitlab account or bitbucket login"
EOF
if [[ -z "${GITPROVIDER}" ]] ; then
{
  cat << EOF >> .temp_keys
# export GITPROVIDER=""      # default is "git@github.com" but private can be "git@git.company.net"
EOF
}
else
{
  cat << EOF >> .temp_keys
export GITPROVIDER="${GITPROVIDER}"      # default is "git@github.com" but private can be "git@git.company.net"
EOF
}
fi

if [[ -z "${VPNREQUIRED}" ]] ; then
{
  cat << EOF >> .temp_keys
# export VPNREQUIRED=""      # empty default will check is the named here vpn name is listed and on
EOF
}
else
{
  cat << EOF >> .temp_keys
export VPNREQUIRED="${VPNREQUIRED}"      # empty default will check is the named here vpn name is listed and on
EOF
}
fi

if [[ -z "${EDITOR}" ]] ; then
{
  cat << EOF >> .temp_keys
# export EDITOR=""           # empty default guake_quick_file_opener will try to guess which editor to use, or use this instead if not found
EOF
}
else
{
  cat << EOF >> .temp_keys
export EDITOR="${EDITOR}"           # empty default guake_quick_file_opener will try to guess which editor to use, or use this instead if not found
EOF
}
fi


if [[ -n "${USERNAMEGIT}" ]] ; then
{
  cat << EOF >> .temp_keys

# Manually force to change name before commit
( command -v git >/dev/null 2>&1; ) && [ -e .git ] && git config --local user.name "${USERNAMEGIT}"
EOF
}
else
{
  cat << EOF >> .temp_keys

# Manually force to change name before commit
# ( command -v git >/dev/null 2>&1; ) && [ -e .git ] && git config --local user.name "First.Last"
EOF
}
fi
if [[ -z "${GITPROVIDER}" ]] ; then
{
  GITPROVIDER="github.com"
}
fi

if [[ -n "${BUNDLE_GITHUB__COM}" ]] ; then
{
  cat << EOF >> .temp_keys

export BUNDLE_GITHUB__COM="${BUNDLE_GITHUB__COM}"

# Manually force to special value key before pull push or commit
( command -v git >/dev/null 2>&1; ) && [ -e .git ] && git config --global --add url."https://${BUNDLE_GITHUB__COM}@${GITPROVIDER}".insteadOf "https://${GITPROVIDER}"


# Manually force to change name before commit
( command -v git >/dev/null 2>&1; ) && [ -e .git ] && git config --local user.name "${USERNAMEGIT}"
EOF
}
else
{
  cat << EOF >> .temp_keys
# export BUNDLE_GITHUB__COM=qweqwerqwerqwerqwerqwerqwerqwerqwerqwerq

# Manually force to special value key before pull push or commit
# ( command -v git >/dev/null 2>&1; ) && [ -e .git ] && git config --global --add url."https://\${BUNDLE_GITHUB__COM}@${GITPROVIDER}".insteadOf "https://${GITPROVIDER}"
EOF
}
fi

if [[ -z "${GITHUB_TOKEN}" ]] ; then
{
  cat << EOF >> .temp_keys
# export GITHUB_TOKEN=qweqwerqwerqwerqwerqwerqwerqwerqwerqwerq
EOF
}
else
{
  cat << EOF >> .temp_keys
export GITHUB_TOKEN="${GITHUB_TOKEN}"
EOF
}
fi


if [[ -z "${CMS_WAGON_NAME}" ]] ; then
{
  cat << EOF >> .temp_keys

# Sample Wagon Shopify values
# export CMS_WAGON_NAME=wagon_name_en_de_or_nl
EOF
}
else
{
  cat << EOF >> .temp_keys

# Sample Wagon Shopify values
export CMS_WAGON_NAME="${CMS_WAGON_NAME}"
EOF
}
fi



if [[ -z "${CMS_HOST}" ]] ; then
{
  cat << EOF >> .temp_keys
# export CMS_HOST=http://0.0.0.0:3001
EOF
}
else
{
  cat << EOF >> .temp_keys
export CMS_HOST="${CMS_HOST}"
EOF
}
fi

if [[ -z "${CMS_HANDLE}" ]] ; then
{
  cat << EOF >> .temp_keys
# export CMS_HANDLE=wagon_name_en_de_or_nl
EOF
}
else
{
  cat << EOF >> .temp_keys
export CMS_HANDLE="${CMS_HANDLE}"
EOF
}
fi

if [[ -z "${CMS_USER_EMAIL}" ]] ; then
{
  cat << EOF >> .temp_keys
# export CMS_USER_EMAIL=root@none.com
EOF
}
else
{
  cat << EOF >> .temp_keys
export CMS_USER_EMAIL="${CMS_USER_EMAIL}"
EOF
}
fi


if [[ -z "${CMS_USER_API_KEY}" ]] ; then
{
  cat << EOF >> .temp_keys
# export CMS_USER_API_KEY=qwerqwerqwerqwerqwerqwerqwerqwerqwerqwer
EOF
}
else
{
  cat << EOF >> .temp_keys
export CMS_USER_API_KEY="${CMS_USER_API_KEY}"
EOF
}
fi



if [[ -z "${JOURNAL_PUT_COMMIT_METHOD}" ]] ; then
{
  JOURNAL_PUT_COMMIT_METHOD="commit"
}
fi

if [[ -z "${JOURNAL_HOME}" ]] ; then
{
  JOURNAL_HOME="\$(realpath \$(pwd)/../)"      # updated realpath macos 20210902
}
fi

if [[ -z "${ISSUETRACKERLOCATION}" ]] ; then
{
  ISSUETRACKERLOCATION="\$(echo \"https://pm.company.net/jira/browse/HTMLEDITOR-\${TICKETID}\")"
}
fi

if [[ -z "${JOURNAL_JOURNALDIR_STYLE_4_FEATURE}" ]] ; then
{
  JOURNAL_JOURNALDIR_STYLE_4_FEATURE="empty"
}
fi
if [[ -z "${JOURNAL_NEWBRANCH_STYLE_4_FEATURE}" ]] ; then
{
  JOURNAL_NEWBRANCH_STYLE_4_FEATURE="\$(echo \"\${TICKETID}_\${DESCRIPTION}\" |  only_2_dashed_words )"
}
fi


if [[ -z "${JOURNAL_NEWBRANCH_STYLE_4_ISSUE}" ]] ; then
{
  JOURNAL_NEWBRANCH_STYLE_4_ISSUE="\$(echo \"\${TICKETID}_\${DESCRIPTION}\" |  only_2_dashed_words )"
}
fi
if [[ -z "${JOURNAL_JOURNALDIR_STYLE_4_ISSUE}" ]] ; then
{
  JOURNAL_JOURNALDIR_STYLE_4_ISSUE="empty"
}
fi



  cat << EOF >> .temp_keys

# journal section
export JOURNAL_PUT_COMMIT_METHOD="${JOURNAL_PUT_COMMIT_METHOD}"    #   "can only be 'put' or 'commit'. PUT makes a direct add and push and COMMIT just commits without pushing "
# export JOURNAL_HOME="\$HOME/_" #  /journal folder  will be added
# export JOURNAL_HOME="\$(realpath \$(pwd)/../)" # updated realpath macos 20210902 #  /journal folder  will be added   # updated realpath macos 20210902
export JOURNAL_HOME="${JOURNAL_HOME}"   #   /journal folder will be added

# journal section - Custom ISSUETRACKERLOCATION - journal_get_description_work_link_url script worker dependency
# [[ -n "\${TICKETID}" ]] && export ISSUETRACKERLOCATION=\$(echo "https://pm.company.net/jira/browse/HTMLEDITOR-\${TICKETID}")   # Sample we can use TICKETID available inside journal_intuivo_cli
[[ -n "\${TICKETID}" ]] && export ISSUETRACKERLOCATION="${ISSUETRACKERLOCATION}"

# journal section- newfeature command script
# Linux
# [[ type -t only_7_dashed_words == *"function"* ]] && export JOURNAL_NEWBRANCH_STYLE_4_FEATURE=\$(echo "\${TICKETID}_\${DESCRIPTION}\" |  only_7_dashed_words ) # methods from sed_function inside journal
# [[ type -t only_5_dashed_words == *"function"* ]] && export JOURNAL_NEWBRANCH_STYLE_4_FEATURE=\$(echo "\${TICKETID}_\${DESCRIPTION}\" |  only_5_dashed_words ) # methods from sed_function inside journal
# [[ type -t only_4_dashed_words == *"function"* ]] && export JOURNAL_NEWBRANCH_STYLE_4_FEATURE=\$(echo "\${TICKETID}_\${DESCRIPTION}\" |  only_4_dashed_words ) # methods from sed_function inside journal
# Mac
type only_2_dashed_words &>/dev/null && export JOURNAL_NEWBRANCH_STYLE_4_FEATURE="${JOURNAL_NEWBRANCH_STYLE_4_FEATURE}" # methods from sed_function inside journal
export JOURNAL_NEWBRANCH_STYLE_4_FEATURE
export JOURNAL_JOURNALDIR_STYLE_4_FEATURE="${JOURNAL_JOURNALDIR_STYLE_4_FEATURE}"  # empty will behave as empty directory when creating it.

# newissue script
# Linux
# [[ type -t only_7_dashed_words == *"function"* ]] && export JOURNAL_NEWBRANCH_STYLE_4_ISSUE=\$(echo "\${TICKETID}_\${DESCRIPTION}\" |  only_7_dashed_words )  # methods from sed_function inside journal
# [[ type -t only_5_dashed_words == *"function"* ]] && export JOURNAL_NEWBRANCH_STYLE_4_ISSUE=\$(echo "\${TICKETID}_\${DESCRIPTION}\" |  only_5_dashed_words )  # methods from sed_function inside journal
# [[ type -t only_4_dashed_words == *"function"* ]] && export JOURNAL_NEWBRANCH_STYLE_4_ISSUE=\$(echo "\${TICKETID}_\${DESCRIPTION}\" |  only_4_dashed_words )  # methods from sed_function inside journal
# Mac
type only_2_dashed_words &>/dev/null && export JOURNAL_NEWBRANCH_STYLE_4_ISSUE="${JOURNAL_NEWBRANCH_STYLE_4_ISSUE}"  # methods from sed_function inside journal
export JOURNAL_NEWBRANCH_STYLE_4_ISSUE
export JOURNAL_JOURNALDIR_STYLE_4_ISSUE="${JOURNAL_JOURNALDIR_STYLE_4_ISSUE}"   # empty will behave as empty directory when creating it.

EOF

if [[ -n "${SAVEDTEMPKEYS}" ]] ; then
{
  while read -r SAVEDLINEONE ; do
  {
    [[ -z "${SAVEDLINEONE}" ]] && continue
    cat << EOF >> .temp_keys
# ${SAVEDLINEONE}
EOF
  }
  done <<< "${SAVEDTEMPKEYS}"
}
fi