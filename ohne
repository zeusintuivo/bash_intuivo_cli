#!/bin/bash
#
# @author Zeus Intuivo <zeus@intuivo.com>
#
#bash shell script check input argument ...OHNE

# Bash: Detect pipe/file input in a shell script
# REF: https://gist.github.com/davejamesmiller/1966557

# How to detect whether input is from keyboard, a file, or another process.
# Useful for writing a script that can read from standard input, or prompt the
# user for input if there is none.

# Source: http://www.linuxquestions.org/questions/linux-software-2/bash-scripting-pipe-input-to-script-vs.-1-570945/
PIPED="";



# In Bash you can also use test -t to check for a terminal:

if [ -t 0 ]; then
    # Terminal input (keyboard) - interactive
    PIPED=""
    exit 0;
else
    # File or pipe input - non-interactive
    PIPED="YES"
fi

# Piped Input
#if [ ! -z "$PIPED" ]
#	then
#	echo "this is pipe..die "
#	exit 0;
#fi
# NOT Piped Input
#if [ -z "$PIPED" ]
#	then
#	echo "this NOT pipe..die "
#	exit 0;
#fi
#echo "PIPED:$PIPED";
#exit;

# ALTERNATIVE:
#if readlink /proc/$$/fd/0 | grep -q "^pipe:"; then
    # Pipe input (echo abc | myscript)
#    PIPED="YES"
#elif file $( readlink /proc/$$/fd/0 ) | grep -q "character special"; then
    # Terminal input (keyboard)
#    PIPED=""
#else
    # File input (myscript < file.txt)
#    PIPED=""

#fi





if [ -z "$1" ] && [ -z "$PIPED" ]
  then
    echo " "
    echo "Missing 1st argument "
    echo " "
  echo "Sample Usage:    - expects one argument  *required"
  echo " "
  echo "    ohne    seek-this "
  echo "    ";

  		    echo "Missing 2nd argument "
		    echo " "
			echo "Can be used:    - with two arguments   -optional "
			echo " "
			echo "    ohne    seek_this      [sift, ack, ./sift, grep, ag, ./ag, ./ack]  -v  for verbose  -h for help"
			echo "    ";
			echo "    assuming order or use sift -> ag -> ack -> grep -> local ./ack"
			echo "    ";
  exit
fi
VERBOSE=0;
DEFAULTSEEKER="sift"
if [ "$1" == "-h" ] && [ -z "$PIPED" ] ; then
	{
		echo " "
		echo " ohne - Ohne in German means without. Script used to NOT show parts of code for mac and linux"
		echo "                                 levering linux scrips sift, ack, grep, ag   "
		echo "Usage: "
		echo " "
		echo " ohne   seek_this   [sift, ack, grep, ag]"
		echo " "
		exit 0;
	}
fi
if [ ! -z "$2" ] ; then
	{
		if [[ "$2" == "-v" ]] && [ -z "$PIPED" ]  ; then
			{
		    	echo "Verbose on";
		    	VERBOSE=1;
			}
		fi

		if [[ "$2" == "sift" || "$2" == "ack" || "$2" == "grep" || "$2" == "ag" || "$2" == "./ag" || "$2" == "./ack" || "$2" == "./sift" ]] ; then
			{
	  			DEFAULTSEEKER="$2"
			}
		fi

	}
fi
if [ ! -z "$3" ] ; then
	{
		if [[ "$3" == "-v" ]] && [ -z "$PIPED" ]  ; then
			{
		    	echo "Verbose on";
		    	VERBOSE=1;
			}
		fi
	}
fi

red=`tput setaf 1`
cyan=`tput setaf 6`
green=`tput setaf 2`
reset=`tput sgr0`

BLACK=$(tput setaf 0)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
yellow=$(tput setaf 3)
LIME_YELLOW=$(tput setaf 190)
POWDER_BLUE=$(tput setaf 153)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
WHITE=$(tput setaf 7)
BRIGHT=$(tput bold)
NORMAL=$(tput sgr0)
BLINK=$(tput blink)
REVERSE=$(tput smso)
UNDERLINE=$(tput smul)

SEEKER="./ack";
IGNORE_DIR="ignore";
FILESCOMMAND="";
PRINTCOMMAND="-l --print0";

msg_red () {
    printf "\n${bdr}%s ${off}%s\n" "$@"
}

msg_green () {
    printf "\n${bdg}%s ${off}%s\n" "$@"
}

trap '{ msg_red " KEYBOARD INTERRUPT."; exit 130; }' INT

if command -v sift >/dev/null 2>&1; then
	{


        if [ $VERBOSE -eq 1 ] ; then
        	{
        	    msg_green " sift INSTALLED."
        	}
        fi
        # -v, --invert-match
	    #-i, --ignore-case      case insensitive (default: off) Case sentive by default
	    #-n, --line-number      show line numbers (default: off)
	    #-Q, --literal          treat pattern as literal, quote meta characters
	    #--output-sep=          output separator (default: "\n")

	    # NOT PIPED then show line numbers
	    if [ -z "$PIPED" ] ; then
        	{
        	    SEEKER="sift --err-skip-line-length -nQv ";
        	}
        fi
	    #  PIPED then hide line numbers
	    if [ ! -z "$PIPED" ] ; then
        	{
        	    SEEKER="sift --err-skip-line-length -Qv ";
        	}
        fi
	    IGNORE_DIR="exclude-dirs";
	    IGNORE_FILE="exclude-files";
	    PRINTCOMMAND="-l --output-sep=\"\\x00\"";
	}
else
	{

	if command -v ag >/dev/null 2>&1; then
		{


        if [ $VERBOSE -eq 1 ] ; then
        	{
        		msg_green " ag INSTALLED."
        	}
        fi
        # -v, --invert-match
	    # -s  is for case sensitive
	    #-Q --literal            Don't parse PATTERN as a regular expression
	    #-0 --null --print0      Separate filenames with null (for 'xargs -0')

	   	# NOT PIPED then show line numbers
	    if [ -z "$PIPED" ] ; then
        	{
        	    SEEKER="ag -sQv ";
        	}
        fi
	    #  PIPED then hide line numbers
	    if [ ! -z "$PIPED" ] ; then
        	{
        	    SEEKER="ag --no-numbers -sQv ";
        	}
        fi
	    IGNORE_DIR="ignore";
        IGNORE_FILE="ignore";
        PRINTCOMMAND="-l --print0";
		}
	else
		{

		#msg_red " NEED TO INSTALL ag."
	    #msg_red " ENTER SUDO PASSWORD AND PRESS ENTER."
		#sudo apt-get install silversearcher-ag -fy

		if command -v ack >/dev/null 2>&1; then
			{


	        if [ $VERBOSE -eq 1 ] ; then
	        	{
	        		msg_green " ack INSTALLED."
	        	}
	        fi
	        # -v, --invert-match
		    # ack is case sensitve by default
			# --print0 Print null byte as separator between filenames, only works with -f, -g, -l, -L or -c.
		    # -Q, --literal                 Quote all metacharacters; PATTERN is litera

		    # Ack DOES NOT SUPPORT HIDDING LINE NUMBERS

	    	# NOT PIPED then show line numbers
		    if [ -z "$PIPED" ] ; then
	        	{
	        	    SEEKER="ack -Qv ";
	        	}
	        fi
		    #  PIPED then hide line numbers
		    if [ ! -z "$PIPED" ] ; then
	        	{
	        	    SEEKER="ack -Qv ";
	        	}
	        fi
	    	IGNORE_DIR="ignore-dir";
            IGNORE_FILE="ignore-file";
            PRINTCOMMAND="-l --print0";

			}
		else
			{

			#msg_red " NEED TO INSTALL ack."
	    	#msg_red " ENTER SUDO PASSWORD AND PRESS ENTER."
			#sudo apt-get install ack-grep -fy

			ls ./ack  | egrep 'ack' &>/dev/null
			if [ $? == 0 ]; then
				{


		        if [ $VERBOSE -eq 1 ] ; then
		        	{
		        		msg_green " ./ack INSTALLED."
		        	}
		        fi


				# Ack DOES NOT SUPPORT HIDDING LINE NUMBERS

		    	# NOT PIPED then show line numbers
			    if [ -z "$PIPED" ] ; then
		        	{
		        	    SEEKER="./ack -Qv ";
		        	}
		        fi
			    #  PIPED then hide line numbers
			    if [ ! -z "$PIPED" ] ; then
		        	{
		        	    SEEKER="./ack -Qv ";
		        	}
		        fi
				IGNORE_DIR="ignore-dir";
            	IGNORE_FILE="ignore-file";
            	PRINTCOMMAND="-l --print0";
				}
			else
				{

				#msg_red " NEED TO INSTALL ./ack "
		    	#msg_red " ENTER SUDO PASSWORD AND PRESS ENTER."
				# cp ~/bin/ack .

				if command -v grep >/dev/null 2>&1; then
					{
					#-i, --ignore-case
					# Perform case insensitive matching.  By default, grep is case sensitive.
					#
					#-E, --extended-regexp
					# Interpret pattern as an extended regular expression (i.e. force grep to behave as
					# egrep).
					#
					#-e pattern, --regexp=pattern
					# Specify a pattern used during the search of the input: an input line is selected if it
					# matches any of the specified patterns.  This option is most useful when multiple -e
					# options are used to specify multiple patterns, or when a pattern begins with a dash
					# (`-').
					#-F, --fixed-strings
					# Interpret pattern as a set of fixed strings (i.e. force grep to behave as fgrep).
					# -v, --invert-match


			        if [ $VERBOSE -eq 1 ] ; then
			        	{
			        		msg_green " grep INSTALLED."
			        	}
			        fi

				    # WHEN PIPED then show line numbers
		            if [ -z "$PIPED" ] ; then
			        	{
			        	    SEEKER="grep -nrvE "
			        	    FILESCOMMAND=".";
			        	}
			        fi
				    #  PIPED then hide line numbers
				    if [ ! -z "$PIPED" ] ; then
			        	{
			        	    SEEKER="grep -rvE "
			        	}
			        fi
		            IGNORE_DIR="exclude-dir";
		            IGNORE_FILE="exclude";
		            PRINTCOMMAND="-l --print0";
					}
				else
					{

					echo "${green} ${red} CANNOT SEARCH ....MISSING SEARCHER SIFT, ACK, AG, ./ACK, ./AG, ./SIFT OR GREP  ";
					exit 1;
			    	#msg_red " NEED TO INSTALL grep."
					}
				fi
				}
			fi
			}
		fi
		}
	fi
	}
fi
#CHECK FOR CHOICE FORCE IT
if command -v ${DEFAULTSEEKER} >/dev/null 2>&1; then
    {
        SEEKER="${DEFAULTSEEKER}";

        if [ $VERBOSE -eq 1 ] && [ -z "$PIPED" ] ; then
        	{
        		echo "${cyan}  using chosen option ... ${SEEKER}  ";
        		msg_green " ${SEEKER} INSTALLED."
        	}
        fi

        # make case sentive for local sift
        if [[ "$DEFAULTSEEKER" == "sift" ]] ; then
        {
        	# -v, --invert-match                         select non-matching lines

		    # NOT PIPED then show line numbers
		    if [ -z "$PIPED" ] ; then
	        	{
	        	    SEEKER="sift --err-skip-line-length -nQv ";
	        	}
	        fi
		    #  PIPED then hide line numbers
		    if [ ! -z "$PIPED" ] ; then
	        	{
	        	    SEEKER="sift --err-skip-line-length -Qv ";
	        	}
	        fi
		    IGNORE_DIR="exclude-dirs";
		    IGNORE_FILE="exclude-files"
		    PRINTCOMMAND="-l --output-sep=\"\\x00\"";
		}
        fi
        # make case sentive for ag
        if [[ "$DEFAULTSEEKER" == "ag" ]] ; then
        {
        	# -v --invert-match
            SEEKER="ag -sQv "
            IGNORE_DIR="ignore";
            IGNORE_FILE="ignore";
            PRINTCOMMAND="-l --print0";
        }
        fi
        # make case sentive for ag
        if [[ "$DEFAULTSEEKER" == "ack" ]] ; then
        {
        	#-v, --invert-match            Invert match: select non-matching lines

		    # Ack DOES NOT SUPPORT HIDDING LINE NUMBERS

	    	# NOT PIPED then show line numbers
		    if [ -z "$PIPED" ] ; then
	        	{
	        	    SEEKER="ack -Qv ";
	        	}
	        fi
		    #  PIPED then hide line numbers
		    if [ ! -z "$PIPED" ] ; then
	        	{
	        	    SEEKER="ack -Qv ";
	        	}
	        fi
            IGNORE_DIR="ignore-dir";
            IGNORE_FILE="ignore-dir";
            PRINTCOMMAND="-l --print0";
        }
        fi
        # make case sentive for local ./ack
        if [[ "$DEFAULTSEEKER" == "./ack" ]] ; then
        {
        	#-v, --invert-match            Invert match: select non-matching lines

            # Ack DOES NOT SUPPORT HIDDING LINE NUMBERS

	    	# NOT PIPED then show line numbers
		    if [ -z "$PIPED" ] ; then
	        	{
	        	    SEEKER="./ack -Qv ";
	        	}
	        fi
		    #  PIPED then hide line numbers
		    if [ ! -z "$PIPED" ] ; then
	        	{
	        	    SEEKER="./ack -Qv ";
	        	}
	        fi
            IGNORE_DIR="ignore-dir";
            IGNORE_FILE="ignore-file";
            PRINTCOMMAND="-l --print0";
        }
        fi
        #use extended expressions
        if [[ "$DEFAULTSEEKER" == "grep" ]] ; then
        {
        	# -v, --invert-match select non-matching lines
    		 # WHEN PIPED then show line numbers
            if [ -z "$PIPED" ] ; then
	        	{
	        	    SEEKER="grep -nrvE "
	        	    FILESCOMMAND=".";
	        	}
	        fi
		    #  PIPED then hide line numbers
		    if [ ! -z "$PIPED" ] ; then
	        	{
	        	    SEEKER="grep -rvE "
	        	}
	        fi
            IGNORE_DIR="exclude-dir";
            IGNORE_FILE="exclude";
            PRINTCOMMAND="-l --print0";
        }
        fi
    }
else
    {
	    if [ $VERBOSE -eq 1 ] && [ -z "$PIPED" ] ; then
        	{
    			echo "${cyan}  using ...${SEEKER}  "
        	}
        fi
    }
fi


SEEKING="$1";
IGNORELIST="--${IGNORE_FILE}=composer.phar --${IGNORE_FILE}=bootstrap.php.cache  --${IGNORE_FILE}=model --${IGNORE_FILE}=load_insert --${IGNORE_FILE}=generateparams --${IGNORE_FILE}=generatelocations --${IGNORE_FILE}=generateinserts --${IGNORE_FILE}=countalltables --${IGNORE_FILE}=conflicts --${IGNORE_DIR}=AbsoluteUrlBundle --${IGNORE_DIR}=.idea --${IGNORE_DIR}=cache --${IGNORE_DIR}=vendor --${IGNORE_DIR}=bower_components  --${IGNORE_DIR}=node_modules --${IGNORE_DIR}=storage/debugbar  --${IGNORE_DIR}=.idea  --${IGNORE_DIR}=.git --${IGNORE_DIR}=storage/logs  --${IGNORE_DIR}=app/Stubs "

#If NOT verbose  and # not PIPED
if [ $VERBOSE -eq 0 ] && [ -z "$PIPED" ] ; then
	{
		msg_green "${cyan} $SEEKING "
		echo "    ";
	}
fi
#If verbose  and # not PIPED
if [ $VERBOSE -eq 1 ] && [ -z "$PIPED" ] ; then
	{
		echo "${reset} ${green} Finding ${reset} $SEEKING ${green}                 with  ${SEEKER} ."
		echo "   ";

		echo "   ";
		echo "${reset} ${green} Seek ignoring composer.phar, vendor, bower_components, node_modules, storage/debugbar, app/Stub and storage/logs with ${SEEKER} -- "
	}
fi

# echo "${cyan}  ack  --ignore=vendor --ignore-dir=bower_components  --ignore-dir=node_modules --ignore-dir=storage/debugbar  --ignore-dir=storage/logs  --ignore-dir=app/Stubs \"${SEEKING}\" "
# echo "${cyan}  ag  --ignore-dir=vendor --ignore-dir=bower_components  --ignore-dir=node_modules --ignore-dir=storage/debugbar  --ignore-dir=storage/logs  --ignore-dir=app/Stubs \"${SEEKING}\" "
# echo "${cyan}  grep  --exclude-dir=vendor --exclude-dir=bower_components  --exclude-dir=node_modules --exclude-dir=storage/debugbar  --exclude-dir=storage/logs  --exclude-dir=app/Stubs \"${SEEKING}\" "

#If verbose  and # not PIPED
if [ $VERBOSE -eq 1 ] && [ -z "$PIPED" ]; then
	{
		echo "   ";
	}
fi
# THIS IS GREP FOR LINUX
# ack  --ignore-dir=vendor --ignore-dir=bower_components  --ignore-dir=node_modules --ignore-dir=storage/debugbar  --ignore-dir=storage/logs  --ignore-dir=app/Stubs "$SEEKING"
# ag  --ignore-dir=vendor --ignore-dir=bower_components  --ignore-dir=node_modules --ignore-dir=storage/debugbar  --ignore-dir=storage/logs  --ignore-dir=app/Stubs "$SEEKING"
# grep  --exclude-dir=vendor --exclude-dir=bower_components  --exclude-dir=node_modules --exclude-dir=storage/debugbar  --exclude-dir=storage/logs  --exclude-dir=app/Stubs "$SEEKING"
#THIS IS GREP FOR MAC
# grep  --exclude-dir=vendor --exclude-dir=bower_components  --exclude-dir=node_modules --exclude-dir=storage/debugbar  --exclude-dir=storage/logs  --exclude-dir=app/Stubs -e "$SEEKING" *

if [[ $SEEKING == *"/"* ]]
then
{

        if [ $VERBOSE -eq 1 ] && [ -z "$PIPED" ] ; then
        	{
				echo "${cyan}   ${SEEKER} \"${SEEKING}\" ${FILESCOMMAND}  ${IGNORELIST}  "
        	}
        fi
        # not PIPED
		if [ -z "$PIPED" ]; then
			{
                                                                                 # not output that  # remove emptylines
        		RESULT=$(${SEEKER} "$SEEKING" ${FILESCOMMAND}      ${IGNORELIST} | awk "!/$SEEKING/" | sed '/^$/d')
			}
		else
			{
				${SEEKER} "$SEEKING" ${FILESCOMMAND}      ${IGNORELIST} | awk "!/$SEEKING/" | sed '/^$/d'
			}
		fi

}
else
{


        if [ $VERBOSE -eq 1 ] && [ -z "$PIPED" ] ; then
         	{
       			echo "${cyan}   ${SEEKER} \"${SEEKING}\" ${FILESCOMMAND}  ${IGNORELIST}  "
        	}
        fi
        # not PIPED
		if [ -z "$PIPED" ]; then
			{
                                                                                 # not output that  # remove emptylines
        		RESULT=$(${SEEKER} "$SEEKING" ${FILESCOMMAND}      ${IGNORELIST} | awk "!/$SEEKING/" | sed '/^$/d')
			}
		else
			{
				${SEEKER} "$SEEKING" ${FILESCOMMAND}      ${IGNORELIST} | awk "!/$SEEKING/" | sed '/^$/d'
				# ${SEEKER} "$SEEKING" ${FILESCOMMAND}      ${IGNORELIST}  &>/dev/null

			}
		fi

}
fi

# If  | egrep "$SEEKING" &>/dev/null | returned an error....so it was... it was found/not found say it and stop execution for not found
if [ $? -eq 0 ]
then
	{

        # not PIPED
		if [ -z "$PIPED" ]; then
			{
				cut -f1 -d":" <<< "$RESULT" > /tmp/tmp1.txt
				cut -f2 -d":" <<< "$RESULT" > /tmp/tmp2.txt
				cut -f3 -d":" <<< "$RESULT" > /tmp/tmp4.txt
				cut -f4 -d":" <<< "$RESULT" > /tmp/temp6.txt
				cut -f5 -d":" <<< "$RESULT" > /tmp/temp8.txt
				cut -f6 -d":" <<< "$RESULT" > /tmp/temp10.txt
				cut -f7 -d":" <<< "$RESULT" > /tmp/temp12.txt
				cut -f8 -d":" <<< "$RESULT" > /tmp/temp14.txt
				cut -f9 -d":" <<< "$RESULT" > /tmp/temp16.txt
				cut -f10 -d":" <<< "$RESULT" > /tmp/temp18.txt

				awk '{print "\033[38;5;201m" $0}' /tmp/tmp1.txt > /tmp/temp1.txt
				awk '{print "\033[38;5;46m" $0}' /tmp/tmp2.txt > /tmp/temp2.txt
				awk '{print "\033[38;5;231m" $0}' /tmp/tmp4.txt > /tmp/temp4.txt

				$(paste -d':' /tmp/temp1.txt /tmp/temp2.txt > /tmp/temp3.txt)
				$(paste -d' ' /tmp/temp3.txt /tmp/temp4.txt > /tmp/temp5.txt)
				$(paste 	  /tmp/temp5.txt /tmp/temp6.txt > /tmp/temp7.txt)
				$(paste 	  /tmp/temp7.txt /tmp/temp8.txt > /tmp/temp9.txt)
				$(paste 	  /tmp/temp9.txt /tmp/temp10.txt > /tmp/temp11.txt)
				$(paste 	  /tmp/temp11.txt /tmp/temp10.txt > /tmp/temp13.txt)
				$(paste 	  /tmp/temp13.txt /tmp/temp10.txt > /tmp/temp15.txt)
				$(paste 	  /tmp/temp15.txt /tmp/temp10.txt > /tmp/temp17.txt)
				$(paste 	  /tmp/temp17.txt /tmp/temp10.txt > /tmp/temp19.txt)
        #cat /tmp/temp19.txt # This was leading errors in display
				while read line; do
            echo $line
        done < /tmp/temp19.txt
				rm /tmp/tmp1.txt /tmp/tmp2.txt /tmp/tmp4.txt /tmp/tmp6.txt /tmp/tmp8.txt /tmp/tmp10.txt /tmp/tmp12.txt /tmp/tmp14.txt /tmp/tmp16.txt /tmp/tmp18.txt /tmp/temp1.txt /tmp/temp2.txt /tmp/tomp4.txt /tmp/temp4.txt /tmp/temp6.txt /tmp/temp8.txt /tmp/temp10.txt /tmp/temp12.txt /tmp/temp14.txt /tmp/temp16.txt /tmp/temp18.txt /tmp/temp3.txt /tmp/temp5.txt /tmp/temp7.txt /tmp/temp9.txt /tmp/temp11.txt /tmp/temp13.txt /tmp/temp15.txt /tmp/temp17.txt /tmp/temp19.txt

			}
		fi


        if [ $VERBOSE -eq 1 ] ; then
        	{
				msg_green "${green} FOUND !"
        	}
        fi
	}
else
	{
		if [ -z "$PIPED" ] ; then
	      	{
				msg_red "${red} SORRY NO OCCURENCES FOUND !"
	      	}
	    fi
		exit 0;
	}
fi

# not PIPED
if [ -z "$PIPED" ]; then
	{
		echo "   ";
	}
fi



