#!/usr/bin/env bash
#!/bin/bash
#
# @author Zeus Intuivo <zeus@intuivo.com>
#
THISSCRIPTNAME=`basename "$0"`

if [[ -z "$1"  ]] || [[ -z "$2"  ]] ; then   # empty value
  echo "

From one folder to another  using batch in subfolders, you don't gets stoped while the computer 'builds' a list
using rsync which is suppoused to be faster at the time I did this (2017)


${THISSCRIPTNAME}   from_path   to_path
  "
    exit 0
fi

if [[ ! -e "${1}" ]]; then
{
	echo '0 Source path check'
    echo "Error: Source path Not found: ${1}"
	exit 69
}
else
    echo '0 Path found check'
fi
if command -v wget >/dev/null 2>&1; then
    echo '1 wget check'
else
	echo '1'
    echo "wget not found. please install"
    exit 69
fi

if command -v rsync >/dev/null 2>&1; then
    echo '2 sed check'
else
    echo "rsync not found. please install"
    exit 69
fi


if command -v find >/dev/null 2>&1; then
    echo '3 sed check'
else
    echo "find not found. please install"
    exit 69
fi


if command -v sed >/dev/null 2>&1; then
    echo '4 sed check'
else
    echo "sed not found. please install"
    exit 69
fi


load_execute_command_wget(){
    local provider="$HOME/_/clis/execute_command_intuivo_cli/execute_command"
    [   -e "${provider}"  ] && source "${provider}"
    [ ! -e "${provider}"  ] && eval """$(wget --quiet --no-check-certificate  https://raw.githubusercontent.com/zeusintuivo/execute_command_intuivo_cli/master/execute_command -O -  2>/dev/null )"""   # suppress only wget download messages, but keep wget output for variable
    ( ( ! command -v comment >/dev/null 2>&1; ) && echo -e "\\n \\n  ERROR! Loading execute_command \\n \\n " && exit 69; )
} # end load_execute_command_wget
load_execute_command_wget



if command -v anounce >/dev/null 2>&1; then
    echo '5 anounce check'
else
    echo "anounce not found. Check Your internet connection"
    exit 69
fi

function remove_last_slash {
    sed 's/\/$//g'  # remove last slash
}


function slashes_to_newlines {
	(
	  if [[ "$(uname)" == "Darwin" ]] ; then
	    # Do something under Mac OS X platform
	    sed -e 's/'"\/"'/\'$'\n/g' #BSD-way 'Mac' splits slashed into enters with newlines divides slashes
	  elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]] ; then
	    # Do something under GNU/Linux platform
	    sed -e 's/'"\/"'/'"\n"'/g' #Linux way splits slashed into enters with newlines divides slashes
	  elif [[ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]] ; then
	    # Do something under Windows NT platform
	    sed -e 's/'"\/"'/'"\n"'/g' #Windows way -Not implemented, Windows-GNU splits slashed into enters with newlines divides slashes
	  fi
	)
}
# TEST: echo "/_/work/company/projects/company-cms-wagon-de/app/assets/fonts/bootstrap/" | slashes_to_newlines
# EXPECTATION:
# _
# work
# company
# projects
# company-cms-wagon-de
# app
# assets
# fonts
# bootstrap
#
function remove_double_slashes { #removes double slashes in path and converts ./ to PWD
    # usage
    #        1. FOLDER=$(remove_double_slashes ".//_/work/company/projects/company-cms-wagon-de///app/assets///fonts/bootstrap///")
    #        2. remove_double_slashes ".//_/work/company/projects/company-cms-wagon-de///app/assets///fonts/bootstrap///"
    local incoming_string="${@}"
    local PARTS=$(slashes_to_newlines <<< "${incoming_string}")
    local ONE_PART
    local result=""
    local COUNTER=0
    local using_string=""
    while read -r ONE_PART; do
    # for ONE_PART in ${PARTS}; do
    {
        if [ ! -z "${ONE_PART}" ] ; then # if not empty
        {
            using_string="${ONE_PART}"
            if [ $COUNTER -eq 0 ] && ( [ "${using_string}" == "." ] || [ -d "${using_string}" ] ) ; then
            {
                result="$(pwd)"
                [ -d "${using_string}" ] && result="$(pwd)/${using_string}"
            } else {
                if [ $COUNTER -eq 0 ] ; then
                {
                    result="${using_string}"
                    [ -d "${using_string}" ] && [[ ${incoming_string:0:1} != "/" ]] && result="$(pwd)/${using_string}"
                } else {
                    result="${result}/${using_string}"
                }
                fi

            }
            fi
            (( COUNTER++ ))
        }
        fi
    }
    done <<< "${PARTS}"
    if [[ ${incoming_string:0:1} == "/" ]] ; then # get first char from string
    {
       [[ ${result:0:1} != "/" ]] && result="/${result}"
    }
    fi
    echo "${result}"
    return 0
}
# TEST: remove_double_slashes "/_/work/company/projects/company-cms-wagon-de///app/assets///fonts/bootstrap///"
# EXPECTATION: /_/work/company/projects/company-cms-wagon-de/app/assets/fonts/bootstrap

# TEST: remove_double_slashes "./work/company/projects/company-cms-wagon-de///app/assets///fonts/bootstrap///"
# EXPECTATION: ${PWD}/work/company/projects/company-cms-wagon-de/app/assets/fonts/bootstrap

function copy_with_rsync() {
    local _from="${1}"
    local _to="${2}"
    (( DEBUG_VERB_READING_LOGIC )) && list rsync -av "${_from}" "${_to}/"
    (( DEBUG_VERB_READING_LOGIC )) && mock_command rsync -av "${_from}" "${_to}/"
    local res=$( (( !DEBUG_VERB_READING_LOGIC )) && rsync -av "${_from}" "${_to}/" 2>&1) #  Pipe both stderr and  stdout to variable
    local error_code="$?"
    (( DEBUG_VERB_READING_LOGIC )) && echo "\${error_code}:${error_code}"
    if [ ${error_code} != 0 ] ; then
    {
        echo "\${error_code}:${error_code}"
        echo "\${output}:${res}"
        (( DEBUG_VERB_READING_LOGIC )) && mock_command rsync -av "${_from}" "${_to}/"
        (( !DEBUG_VERB_READING_LOGIC )) && rsync -av "${_from}" "${_to}/"
        _say_error_and_exit_worker Failed to copy directory
        exit 1
    }
    fi
    if [[ -d "${_from}" ]]; then
    {
        list_of_dot_files=$(ls "${_from}/.[^.]*" 2>&1) #  Pipe both stderr and  stdout to variable
        error_code="$?"
        if [ ${error_code} == 0 ] ; then  # if folder shows hidden files only
        {
            list copy all hidden files inside "${_from}":
            comment rsync -avzP "${_from}/.[^.]*" "${_to}/" 2>&1 #  Pipe both stderr and  stdout to variable
            anounce rsync -avzP "${_from}/.[^.]*" "${_to}/" 2>&1 #  Pipe both stderr and  stdout to variable

            (( DEBUG_VERB_READING_LOGIC )) && mock_command "${_from}/.[^.]*"
            (( DEBUG_VERB_READING_LOGIC )) && mock_command "${list_of_dot_files}"
            (( DEBUG_VERB_READING_LOGIC )) && mock_command rsync -avzP "${_from}/.[^.]*" "${_to}/"
            res=$( (( !DEBUG_VERB_READING_LOGIC )) && rsync -avzP "${list_of_dot_files}" "${_to}/" 2>&1) #  Pipe both stderr and  stdout to variable
            error_code="$?"
            if [ ${error_code} != 0 ] ; then
            {
                echo "\${error_code}:${error_code}"
                echo "\${output}:${res}"
                anounce rsync -avzP "${_from}/.[^.]*" "${_to}/"
                mock_command "${list_of_dot_files}"
                mock_command rsync -avzP "${_from}/.[^.]*" "${_to}/"
                _say_error_and_exit_worker Failed to copy  hidden files inside
                exit 1
            }
            fi
        # } else {
        #   echo "$(ls "${_from}/.[^.]*")"
        #    echo "\${error_code}:${error_code}"
        #    echo "\${output}:${res}"
        #    exit 1
        }
        fi


    }
    fi

}

function copy_from(){
    local _from_path="${1}"
    local _filename="${2}"
    if [ -e "${_filename}" ] && [ ! -e "${_from_path}/${_filename}" ]; then
    {
        echo "${_filename}"
        return 0
    }
    elif [ ! -e "${_filename}" ] && [ -e "${_from_path}/${_filename}" ]; then
    {
        echo "${_from_path}/${_filename}"
        return 0
    }
    fi
}
DEBUG_VERB_READING_LOGIC=0

function main_copy_loop() {
    local _from="${1}"
    local _to="${2}"
    local FROMPATH TOPATH
    local _debug="${3}"  #  0 null "" means off,  1 means on
    if (( _debug )) ; then {
        # REF: https://stackoverflow.com/questions/64786/error-handling-in-bash
        set -o pipefail  # trace ERR through pipes
        set -o errtrace  # trace ERR through 'time command' and other functions
        set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable
        set -o errexit   ## set -e : exit the script if any statement returns a non-true return value
        local stderr_log="/dev/shm/stderr.log"
        exec 2>"$stderr_log"
        debug "DEBUG IS ON"
        DEBUG_VERB_READING_LOGIC=1
        echo "_from: ${_from}"
        echo "_to: ${_to}"
    }
    fi
    local _saved_pwd=$(pwd)
    if [[ -d "${_from}" ]] ; then
    {
        cd  "${_from}"
        FROMPATH=$(realpath .)
        cd "${_saved_pwd}"
    }
    fi
    (( _debug )) && debug "FROMPATH: <${FROMPATH}>"
    if [[ -d "${_to}" ]] ; then
    {
        cd  "${_to}"
        TOPATH=$(realpath .)
        cd "${_saved_pwd}"

    } else {
        anounce "Creating missing ${_to}"
        mkdir -p "${_to}"
    }
    fi
    (( _debug )) && debug "TOPATH: <${TOPATH}>"
    local filename just_file_name COPY_FROM one_item all_files COPY_FROM_corrected TOPATH_corrected
    anounce Copy Batch
    # TODO REVEW Maybe only Linux (( _debug )) && mock_command find \"$FROMPATH\" -maxdepth 1 \| sed s@\"${FROMPATH}\"@@g  \| sed \'s/\.\///g\' \| sed '\/\^\\.\$\/d'
    # TODO REVEW Maybe only Linux all_files=$(find "$FROMPATH" -maxdepth 1 | sed s/"${FROMPATH}"/g | sed 's/\.\///g' | sed '/^\.$/d' )
    # (( _debug )) && mock_command find \"$FROMPATH\" -maxdepth 1 \| sed s@\"${FROMPATH}\"@@g \| sed '/^\.$/d'
    all_files=$(find "$FROMPATH" -maxdepth 1 )
    #anounce  Found:"${all_files}"
    #exit

    while read -r one_item; do
    {
        if [ ! -z "${one_item}" ] && [[ "${FROMPATH}/${one_item}" != "${FROMPATH}/${FROMPATH}" ]]; then
        {
            (( _debug )) && debug "one_item: <${one_item}>"
            filename=$(escape_filename <<< "${one_item}")
            (( _debug )) && debug "filename: ${filename}"
            [ -d "${FROMPATH}/${filename}/" ] && mkdir -p "${TOPATH}/${filename}"
            comment "${filename}"
            just_file_name=$(echo $(basename "${filename}"))
            (( _debug )) && debug "just_file_name: <${just_file_name}>"
            COPY_FROM=$(copy_from "${FROMPATH}" "${filename}")
            (( _debug )) && debug "COPY_FROM: ${COPY_FROM}"
            COPY_FROM_corrected=$(remove_double_slashes "${COPY_FROM}")
            (( _debug )) &&  debug "COPY_FROM_corrected: ${COPY_FROM_corrected}"
            TOPATH_corrected=$(remove_double_slashes "${TOPATH}")
            (( _debug )) &&  debug "TOPATH ${TOPATH}"
            (( _debug )) &&  debug "TOPATH_corrected: ${TOPATH_corrected}"
            # (( _debug )) && return 0
            copy_with_rsync "${COPY_FROM_corrected}" "${TOPATH_corrected}"

        }
        fi
    }
    done <<< "${all_files}"
}


main_copy_loop "${1}" "${2}" "${3}"
# Sample call
# copy_from_to zipper-desktop zipper_mirror
#
# To Debug
# copy_from_to zipper-desktop zipper_mirror 1


