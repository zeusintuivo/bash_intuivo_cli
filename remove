#!/usr/bin/env bash
#!/bin/bash
# @author Zeus Intuivo <zeus@intuivo.com>
#
THISSCRIPTNAME=$(basename "$0")
#bash shell script check input argument
if [ -z "$1" ]
  then
    echo "Removes all finds found by 'find' command find . -name \"*SEEKING*\"  "
    echo " "
    echo "Missing 1st argument "
    echo " "
  echo "Sample Usage:    - expects one argument "
  echo " "
  echo "    ${THISSCRIPTNAME} seek-this "
  echo "    ";
  exit
fi
SEEKING="$1";

#echo $0=./replace
echo -e "\033[38;5;147m "
echo " "
echo "Find a filename using 'find' from linux/mac and 'xargs'  and moved it to temp"
echo -e "Locating  \033[38;5;214m  $SEEKING   \033[38;5;147m and moving recursively  "
echo " "
echo " ";

function escape_spaces {
    sed 's/\ /\\\ /g'
}
function escape_doublequotes {
    sed 's/\"/\\\"/g'
}


continue_y_n() {
  read -rp "CONTINUE Y/[N]: CONTROL C to STOP " reply
  reply=${reply:-N}
  echo "$reply"
} # end continue_y_n
echo "remove all files called *${SEEKING}* in subfolders recursively !!!?  "
  echo "You are pointing to this folder $(pwd)"
THE_ANSWER=$(continue_y_n)
echo "THE_ANSWER:${THE_ANSWER}"
if [[ "${THE_ANSWER}" == "y" ||  "${THE_ANSWER}" == "Y" ]]  ; then
{
  echo "..remove !!"
}
else
{
  echo "..aborted!!"
  exit 0
}
fi
#
# C H E C K   R E P L A C E   F U N C T I O N S   I N S T A L L E D  --Start
#
check_version_data () {
  local -i  _err
  local REPLACER="$1"
  if command -v "${REPLACER}" >/dev/null 2>&1; then
    # It looks installed
    # .. is it working properly
    # msg_green " ${1} INSTALLED."

    #stdout UND stderr -capture  REF: https://www.thomas-krenn.com/de/wiki/Bash_stdout_und_stderr_umleiten
    ${REPLACER}  --version &> "/tmp/cp_or_sed_command_test_${REPLACER}.txt"
    _err=$?
    local PROPERLYWORKING=""
    PROPERLYWORKING="$(< "/tmp/cp_or_sed_command_test_${REPLACER}.txt")"


    if [[ "$(uname)" == "Darwin" ]] ; then
      # Do something under Mac OS X platform
      if [ ${_err} -eq 64 ] && [[ "$PROPERLYWORKING" == *"illegal option -- -"* ]]; then { echo "MAC"; return;} fi

    elif [[ "$(cut -c1-5 <<< "$(uname -s)")" == "Linux" ]] ; then
      # Do something under GNU/Linux platform
      echo " ";

    elif [[ "$(cut -c1-10 <<< "$(uname -s)")" == "MINGW32_NT" ]] ; then
      # Do something under Windows NT platform
      echo " ";

      # nothing here
    fi
    if [[ "$PROPERLYWORKING" == *"dyld:"* ]]; then { echo "error"; return;} fi
    if [[ $PROPERLYWORKING == *"GNU"* ]]; then { echo "GNU"; return;} else { echo "MAC";return;} fi
    # if  [ ${_err} -ne 0 ] ; then { echo "error"; return;} fi
    # echo "checked";
    # return;
  else
    # msg_red "${green} ${red} CANNOT REPLACE ...${1} IS MISSING ";
    # msg_red " NEED TO INSTALL ${1}.       Linux:    sudo apt-get install ${1}         Mac:     brew install ${1}   "
    echo "install";
    return;
  fi
}
msg_install () {
  msg_red " CANNOT REPLACE ...${1} IS MISSING ";
  msg_red " NEED TO INSTALL ${1}.       Linux:    sudo apt-get install ${1}         Mac:     brew install ${1}   "
}
# REPLACER="sed";
REPLACER="cp";
VALIDREPLACER=$(check_version_data "${REPLACER}")


if [[ $VALIDREPLACER == "error" ]] ; then
  msg_red "Error with replacer ${REPLACER}"
  msg_red " - Error:"
  cat /tmp/cp_or_sed_command_test_${REPLACER}.txt
   rm /tmp/cp_or_sed_command_test_${REPLACER}.txt
fi

if [[ $VALIDREPLACER == "install" ]] ; then
  msg_install "${REPLACER}"
fi
rm /tmp/cp_or_sed_command_test_${REPLACER}.txt

# TODO - Remove Repetition HERE
# ? empty still
if [[ $VALIDREPLACER == "install" || $VALIDREPLACER == "error"  ]] ; then
  REPLACER="sed";
  VALIDREPLACER=$(check_version_data "${REPLACER}")

  if [[ $VALIDREPLACER == "error" ]] ; then
    msg_red "Error with replacer ${REPLACER}"
    msg_red " - Error:"
    cat /tmp/cp_or_sed_command_test_${REPLACER}.txt
     rm /tmp/cp_or_sed_command_test_${REPLACER}.txt
    exit 1;
  fi

  if [[ $VALIDREPLACER == "install" ]] ; then
    msg_install "${REPLACER}"
    rm /tmp/cp_or_sed_command_test_${REPLACER}.txt
    exit 1;
  fi
fi



REPLACERGNU="NO"
if [[ $VALIDREPLACER == "GNU" ]] ; then
  REPLACERGNU="YES"
fi

# Test
# echo "REPLACERGNU: $REPLACERGNU"
# echo "VALIDREPLACER: $VALIDREPLACER"
# exit
# C H E C K   R E P L A C E   F U N C T I O N S   I N S T A L L E D  -- RESULTS
# Results as
#             $REPLACERGNU  NO OR YES
#             $REPLACERGNU  ex or sed or cp or any command
#             halts execution if not found
#
# C H E C K   R E P L A C E   F U N C T I O N S   I N S T A L L E D  -- End


function removal_with_subdirectories() {


# Using mv
#
#   or
# REF: http://stackoverflow.com/questions/7190965/how-to-move-and-overwrite-all-files-from-one-directory-to-another
# It's also possible by using rsync, for example:
#
# rsync -va --delete-after src/ dst/
# where:
#
# -v, --verbose: increase verbosity
# -a, --archive: archive mode; equals -rlptgoD (no -H,-A,-X)
# --delete-after: delete files on the receiving side be done after the transfer has completed
# If you've root privileges, prefix with sudo to override potential permission issues.
    local CURCOMMAND FILESFOUND1 FILESFOUND2 FILESFOUND3 FILESFOUND4 FILESFOUND
    local REPLACERGNU
    REPLACERGNU="${1}"
    local SEEKING
    SEEKING="${*:2}"
    [[ -z "${SEEKING}" ]] && return;
    CURCOMMAND="find . -name \"*${SEEKING}*\" -print0  | xargs -0 -I {} mv {} /tmp/ "
    # dotglob:
    #      If set, Bash includes filenames beginning with a ‘.’ in the results of filename expansion.
    shopt -s dotglob   # Notice this is a bash script #!/usr/bin/env bash as stated on the header
    #
    # find . -name "*${SEEKING}*" -print0 | xargs -0 rm
    #    This echo  $(echo "${CURCOMMAND}")   is work around ...if removed
    #      it outputs only this    ====    CURCOMMAND  ==== "
    #
    CURCOMMAND="find . -name \"${SEEKING}\" -print0  | xargs -0 -I {} mv {} /tmp/ "
    echo -e "\033[38;5;27m ====   \033[38;5;214m ${CURCOMMAND}           \033[38;5;27m     ====";
    FILESFOUND1="$(find . -name "${SEEKING}")"

    CURCOMMAND="find . -name \"${SEEKING}*\" -print0  | xargs -0 -I {} mv {} /tmp/ "
    echo -e "\033[38;5;27m   ====   \033[38;5;214m ${CURCOMMAND}        \033[38;5;27m   ====";
    FILESFOUND2="$(find . -name "${SEEKING}*")"

    CURCOMMAND="find . -name \"*${SEEKING}\" -print0  | xargs -0 -I {} mv {} /tmp/ "
    echo -e "\033[38;5;27m     ====   \033[38;5;214m ${CURCOMMAND}    \033[38;5;27m   ====";
    FILESFOUND3="$(find . -name "*${SEEKING}")"

    CURCOMMAND="find . -name \"*${SEEKING}*\" -print0  | xargs -0 -I {} mv {} /tmp/ "
    echo -e "\033[38;5;27m       ====   \033[38;5;214m ${CURCOMMAND}\033[38;5;27m  ====";
    FILESFOUND4="$(find . -name "*${SEEKING}*")"
    FILESFOUND="${FILESFOUND1}
${FILESFOUND2}
${FILESFOUND3}
${FILESFOUND4}"
    [[ -z "${FILESFOUND}" ]] && echo -e "\033[38;5;27m         ====   \033[38;5;214m Nothing found !\033[38;5;27m  ====" && return;
    echo -e "\033[38;5;147m "
    echo "${FILESFOUND} "
    echo -e "\n"
    #find . -name "*${SEEKING}*" -print0  | xargs -0 -I {} mv {} /tmp/
    local ONE_FULLPATH_FILENAME ONE_FULLPATH_FILENAME JUST_FILENAME
    while read -r ONE_FULLPATH_FILENAME; do
      # if not empty
      [[ -z "${ONE_FULLPATH_FILENAME}" ]] && continue
      JUST_FILENAME="$(basename "${ONE_FULLPATH_FILENAME}")"
      echo -e "\033[38;5;27m ..copying... ${JUST_FILENAME}  \033[38;5;214m cp -Rrf ${ONE_FULLPATH_FILENAME} /tmp/       \033[38;5;27m      ";
      if [[ "${REPLACERGNU}" == "YES" ]] ; then
      # cp GNU
      {
        echo -e "\033[38;5;226m cp GNU ";
        cp -Rrf "${ONE_FULLPATH_FILENAME}" /tmp/
      }
      else
      # cp mac
      {
        echo -e "\033[38;5;226m cp MAC ";
        cp -rf "${ONE_FULLPATH_FILENAME}" /tmp/
      }
      fi
      echo -e "\033[38;5;27m ..cleaning..  \033[38;5;214m rm -rf ${ONE_FULLPATH_FILENAME}     \033[38;5;27m      ";
      rm -rf "${ONE_FULLPATH_FILENAME}"
      #echo -e "\033[38;5;27m ..removing..   \033[38;5;214m $(echo "rm -rf ${ONE_FULLPATH_FILENAME}")       \033[38;5;27m      ";
      #rm -rf """${ONE_FULLPATH_FILENAME}"""

      echo -e "\033[38;5;27m  and moved to /tmp/           \033[38;5;214m";
      echo " ";
    done <<< "$(cut -c 3- <<<"${FILESFOUND}" | sort | uniq)"
} # end removal_with_subdirectories

removal_with_subdirectories "${REPLACERGNU}"  "${SEEKING}"

# check operation systems

#   if [[ "$(uname)" == "Darwin" ]] ; then
#     # Do something under Mac OS X platform
#     echo " ";

#   elif [[ "$(cut -c1-5 <<< "$(uname -s)")" == "Linux" ]] ; then
#     # Do something under GNU/Linux platform
#     echo " ";

#   elif [[ "$(cut -c1-10 <<< "$(uname -s)")" == "MINGW32_NT" ]]  || [[ "$(cut -c1-10 <<< "$(uname -s)")" == "MINGW64_NT" ]] ; then
#     # Do something under Windows NT platform
#     echo " ";

#     # nothing here
#   fi



# echo " "
