# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
 
#START 
 
export CLICOLOR=1 
export LSCOLORS=GxFxCxDxBxegedabagaced
LS_COLORS='di=1:fi=0:ln=31:pi=5:so=5:bd=5:cd=5:or=31:mi=0:ex=35:*.rpm=90'
export LS_COLORS
export LS_COLORS='di=01;36:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:';
export LSCOLORS='di=01;36:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:';
 
# Make your own colors 
 
 
# bash_crm_cli
export BASHCRMCLI="/_/bash_crm_cli"
export PATH="$PATH:$BASHCRMCLI"
 
_git_log_prettily () {
    if ! [ -z $1 ]; then
        git log --pretty=$1
    fi
 }
 colorize_via_pygmentize () {
    if [ ! -x "$(which pygmentize)" ]; then
        return -1
    fi
    if [ $# -eq 0 ]; then
        pygmentize -g $@
    fi
    for FNAME in $@; do
        filename=$(basename "$FNAME")
        lexer=`pygmentize -N \"$filename\"`
        if [ "Z$lexer" != "Ztext" ]; then
            pygmentize -l $lexer "$FNAME"
        else
            pygmentize -g "$FNAME"
        fi
    done
 }
 alias ..='cd ..'
 alias ...=../..
 alias ....=../../..
 alias .....=../../../..
 alias ......=../../../../..
 alias 1='cd -'
 alias 2='cd -2'
 alias 3='cd -3'
 alias 4='cd -4'
 alias 5='cd -5'
 alias 6='cd -6'
 alias 7='cd -7'
 alias 8='cd -8'
 alias 9='cd -9'
 alias _=sudo
 alias afind='ack -il'
 alias brews='brew list -1'
 alias bubc='brew upgrade && brew cleanup'
 alias bubo='brew update && brew outdated'
 alias bubu='bubo && bubc'
 alias c=clear
 alias cd..='cd ..'
 alias colorize=colorize_via_pygmentize
 alias cppcompile='c++ -std=c++11 -stdlib=libc++'
 alias d='dirs -v | head -10'
 alias e=exit
 alias g=git
 alias ga='git add'
 alias gaa='git add --all'
 alias gapa='git add --patch'
 alias gb='git branch'
 alias gba='git branch -a'
 alias gbd='git branch -d'
 alias gbda='git branch --no-color --merged | command grep -vE "^(\*|\s*(master|develop|dev)\s*$)" | command xargs -n 1 git branch -d'
 alias gbl='git blame -b -w'
 alias gbnm='git branch --no-merged'
 alias gbr='git branch --remote'
 alias gbs='git bisect'
 alias gbsb='git bisect bad'
 alias gbsg='git bisect good'
 alias gbsr='git bisect reset'
 alias gbss='git bisect start'
 alias gc='git commit -v'
 alias 'gc!'='git commit -v --amend'
 alias gca='git commit -v -a'
 alias 'gca!'='git commit -v -a --amend'
 alias gcam='git commit -a -m'
 alias 'gcan!'='git commit -v -a --no-edit --amend'
 alias 'gcans!'='git commit -v -a -s --no-edit --amend'
 alias gcb='git checkout -b'
 alias gcd='git checkout develop'
 alias gcf='git config --list'
 alias gcl='git clone --recursive'
 alias gclean='git clean -fd'
 alias gcm='git checkout master'
 alias gcmsg='git commit -m'
 alias 'gcn!'='git commit -v --no-edit --amend'
 alias gco='git checkout'
 alias gcount='git shortlog -sn'
 alias gcp='git cherry-pick'
 alias gcpa='git cherry-pick --abort'
 alias gcpc='git cherry-pick --continue'
 alias gcs='git commit -S'
 alias gcsm='git commit -s -m'
 alias gd='git diff'
 alias gdca='git diff --cached'
 alias gdct='git describe --tags `git rev-list --tags --max-count=1`'
 alias gdt='git diff-tree --no-commit-id --name-only -r'
 alias gdw='git diff --word-diff'
 alias gemsets='rvm gemset list'
 alias gf='git fetch'
 alias gfa='git fetch --all --prune'
 alias gfo='git fetch origin'
 alias gg='git gui citool'
 alias gga='git gui citool --amend'
 git_current_branch () {
    local ref
    ref=$(command git symbolic-ref --quiet HEAD 2> /dev/null)
    local ret=$?
    if [[ $ret != 0 ]];  then
        [[ $ret = 128 ]] && return
        ref=$(command git rev-parse --short HEAD 2> /dev/null) || return
    fi
    echo ${ref#refs/heads/}
 }
 alias ggpull='git pull origin $(git_current_branch)'
 alias ggpur=ggu
 alias ggpush='git push origin $(git_current_branch)'
 alias ggsup='git branch --set-upstream-to=origin/$(git_current_branch)'
 alias ghh='git help'
 alias gignore='git update-index --assume-unchanged'
 alias gignored='git ls-files -v | grep "^[[:lower:]]"'
 alias git-svn-dcommit-push='git svn dcommit && git push github master:svntrunk'
 alias gk='\gitk --all --branches'
 alias gke='\gitk --all $(git log -g --pretty=%h)'
 alias gl='git pull'
 alias glg='git log --stat'
 alias glgg='git log --graph'
 alias glgga='git log --graph --decorate --all'
 alias glgm='git log --graph --max-count=10'
 alias glgp='git log --stat -p'
 alias glo='git log --oneline --decorate'
 alias globurl='noglob urlglobber '
 alias glog='git log --oneline --decorate --graph'
 alias gloga='git log --oneline --decorate --graph --all'
 alias glol='git log --graph --pretty='\''%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\'' --abbrev-commit'
 alias glola='git log --graph --pretty='\''%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\'' --abbrev-commit --all'
 alias glp=_git_log_prettily
 alias glum='git pull upstream master'
 alias gm='git merge'
 alias gmom='git merge origin/master'
 alias gmt='git mergetool --no-prompt'
 alias gmtvim='git mergetool --no-prompt --tool=vimdiff'
 alias gmum='git merge upstream/master'
 alias gp='git push'
 alias gpd='git push --dry-run'
 alias gpoat='git push origin --all && git push origin --tags'
 alias gpristine='git reset --hard && git clean -dfx'
 alias gpsup='git push --set-upstream origin $(git_current_branch)'
 alias gpu='git push upstream'
 alias gpv='git push -v'
 alias gr='git remote'
 alias gra='git remote add'
 alias grb='git rebase'
 alias grba='git rebase --abort'
 alias grbc='git rebase --continue'
 alias grbi='git rebase -i'
 alias grbm='git rebase master'
 alias grbs='git rebase --skip'
 alias grep='grep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn}'
 alias grh='git reset HEAD'
 alias grhh='git reset HEAD --hard'
 alias grmv='git remote rename'
 alias grrm='git remote remove'
 alias grset='git remote set-url'
 alias grt='cd $(git rev-parse --show-toplevel || echo ".")'
 alias gru='git reset --'
 alias grup='git remote update'
 alias grv='git remote -v'
 alias gsb='git status -sb'
 alias gsd='git svn dcommit'
 alias gsi='git submodule init'
 alias gsps='git show --pretty=short --show-signature'
 alias gsr='git svn rebase'
 alias gss='git status -s'
 alias gst='git status'
 alias gsta='git stash save'
 alias gstaa='git stash apply'
 alias gstc='git stash clear'
 alias gstd='git stash drop'
 alias gstl='git stash list'
 alias gstp='git stash pop'
 alias gsts='git stash show --text'
 alias gsu='git submodule update'
 alias gts='git tag -s'
 alias gtv='git tag | sort -V'
 alias gunignore='git update-index --no-assume-unchanged'
 alias gunwip='git log -n 1 | grep -q -c "\-\-wip\-\-" && git reset HEAD~1'
 alias gup='git pull --rebase'
 alias gupv='git pull --rebase -v'
 alias gwch='git whatchanged -p --abbrev-commit --pretty=medium'
 alias gwip='git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify -m "--wip--"'
 alias history='fc -l 1'
 alias l='ls -lah'
 alias la='ls -lawG $*'
 alias ll='ls -Gal $*'
 alias ls='ls -wG $*'
 alias lsa='ls -lah'
 alias md='mkdir -p'
 open_command () {
    emulate -L zsh
    setopt shwordsplit
    local open_cmd
    case "$OSTYPE" in
        (darwin*) open_cmd='open' ;;
        (cygwin*) open_cmd='cygstart' ;;
        (linux*) open_cmd='xdg-open' ;;
        (msys*) open_cmd='start ""' ;;
        (*) echo "Platform $OSTYPE not supported"
            return 1 ;;
    esac
    if [[ "$OSTYPE" = darwin* ]] ; then
        $open_cmd "$@" &> /dev/null
    else
        nohup $open_cmd "$@" &> /dev/null
    fi
 }
 alias ofd='open_command $PWD'
 alias pip='noglob pip'
 alias please=sudo
 alias po=popd
 alias pu=pushd
 alias pyfind='find . -name "*.py"'
 alias pygrep='grep --include="*.py"'
 alias rd=rmdir
 alias rubies='rvm list rubies'
 alias run-help=man
 _symfony_console () {
    echo "php $(find . -maxdepth 2 -mindepth 1 -name 'console' -type f | head -n 1)"
 }
 alias sf='`_symfony_console`'
 alias sfcl='sf cache:clear'
 alias sfcontainer='sf debug:container'
 alias sfcw='sf cache:warmup'
 alias sfdev='sf --env=dev'
 alias sfgb='sf generate:bundle'
 alias sfprod='sf --env=prod'
 alias sfroute='sf debug:router'
 alias sfsr='sf server:run -vvv'
 alias ssh='ssh -X'
 #subl () {
 #   "$_sublime_path" $*
 #}
 alias st=subl
 find_project() {
    local PROJECT_ROOT="${PWD}"
    local FINAL_DEST="."
    while [[ $PROJECT_ROOT != "/" && ! -d "$PROJECT_ROOT/.git" ]]; do
    {
        PROJECT_ROOT=$(dirname $PROJECT_ROOT)
    }
    done
    if [[ $PROJECT_ROOT != "/" ]] ;  then
    {
        local PROJECT_NAME="${PROJECT_ROOT##*/}"
        local SUBL_DIR=$PROJECT_ROOT
        while [[ $SUBL_DIR != "/" && ! -f "$SUBL_DIR/$PROJECT_NAME.sublime-project" ]]; do
        {
            SUBL_DIR=$(dirname $SUBL_DIR)
        }
        done
        if [[ $SUBL_DIR != "/" ]];        then
        {
            FINAL_DEST="$SUBL_DIR/$PROJECT_NAME.sublime-project"
        }
        else 
        {
            FINAL_DEST=$PROJECT_ROOT
        }
        fi
    }
    fi
    subl $FINAL_DEST
 }
 find_git() {
    local PROJECT_ROOT="${PWD}"
    local FINAL_DEST="."
    while [[ $PROJECT_ROOT != "/" && ! -d "$PROJECT_ROOT/.git" ]]; do
    {
        PROJECT_ROOT=$(dirname $PROJECT_ROOT)
    }
    done
    if [[ $PROJECT_ROOT != "/" ]] ;  then
    {
        echo $PROJECT_ROOT
        return 
    }
    fi
    return 
}
 alias stp=find_project
 alias stt='st .'
 alias which-command=whence
 
 alias ls='ls --color=auto'
 #alias dir='dir --color=auto'
 #alias vdir='vdir --color=auto'
 
 alias grep='grep --color=auto'
 alias fgrep='fgrep --color=auto'
 alias egrep='egrep --color=auto'
 
 
 
 
 
 #COLORED Directories REF: http://www.friendlyskies.net/notebook/use-a-nicely-colored-ls-directory-display-in-iterm2-for-os-x
 
 alias cd..="cd .."
 alias c="clear"
 alias e="exit"
 alias ssh="ssh -X"
 alias ..="cd .."
 
 # Debian using G # alias ls='ls -wG $*'
 # alias la='ls -lawG $*'
 # alias ll='ls -Gal $*'
 # CentOS alias ls='ls -w $*'
 alias la='ls -law $*'
 alias ll='ls -al $*'
 
 
 # COLORS & PROMPT
 G_R_A_Y_E_D_O_U_T="30m"
 R_E_D="31m"
 G_R_E_E_N="32m"
 Y_E_LL_O_W="33m"
 Y_E_202_O_W="202m"
 D_A_R_K_B_L_U_E="34m"
 P_U_R_P_L_E="35m"
 C_Y_A_N="36m"
 W_H_I_T_E_B_O_LD="37m"

 case  $(whoami) in
        (root*)    _user="\[\033[01;$R_E_D\]\u" ;;
        (je*)      _user="\[\033[01;$D_A_R_K_B_L_U_E\]\u" ;;
        (vagrant*) _user="\[\033[01;$Y_E_LL_O_W\]\u" ;;
        (docker*)  _user="\[\033[01;$G_R_A_Y_E_D_O_U_T\]\u" ;;
        (zeus*)    _user="\[\033[01;$P_U_R_P_L_E\]\u" ;;
        (*)        _user="\[\033[01;$G_R_E_E_N\]\u" ;;
 esac

 
 _current_folder="\[\033[01;$C_Y_A_N\] \w"
 _prompt_char="\[\033[$W_H_I_T_E_B_O_LD\]$\[\033[00m\] "
 
 _time_status="\[\033[01;$C_Y_A_N\]\`date +%H:%M:%S\`"
 _branch_name="\[\033[$Y_E_LL_O_W\][\$(git branch 2>/dev/null | grep '^*' | sed s/..//)]"
 
 # Column Format right align branch and time. Add columns +6 to compensate for chars inside of colors.original hack suggests -1 REF: http://stackoverflow.com/questions/7697889/how-to-show-git-status-info-on-the-right-side-of-the-terminal
 #export PS1="\$(printf \"%*s\\r%s\" \$(( COLUMNS-1 )) \"${_branch_name}${_time_status}\" \"${_user}@${_current_folder} ${_prompt_char}\")" 
 
 rightprompt()
 {
    local right_stuff="${_branch_name}${_time_status}"
    #right_stuff="right"
    if [ ! -z ${COLUMNS+x} ] ; then # check if a variable is set and not empty 
    {
        # printf "%*" "${right_stuff}"
        # }
        #else 
        # {
        #printf "%*s" $COLUMNS "${right_stuff}" #BROKEN 
        #printf "%*s" $(( COLUMNS )) "${right_stuff}" ##WORKS
        #printf "%*s" $COLUMNS "right" #WORKS 
        #printf "%*s" $COLUMNS "$(date +%H:%M:%S)" #WORKS 
        #printf "%*s" $COLUMNS "$(git branch 2>/dev/null | grep '^*' | sed s/..//)" #WORKS 
        #printf "%*s" $COLUMNS "$(git branch 2>/dev/null | grep '^*' | sed s/..//)$(date +%H:%M:%S)" #WORKS 
        # Dont work with \033 but with 
        #   #printf "%*s" $COLUMNS "\033[$Y_E_LL_O_W$(git branch 2>/dev/null | grep '^*' | sed s/..//)\033[01;$C_Y_A_N$(date +%H:%M:%S)" #WORKS    but the \033 breaks it 
        #   printf "%*s" $(( COLUMNS + 10)) "\033[$Y_E_LL_O_W$(git branch 2>/dev/null | grep '^*' | sed s/..//)\033[01;$C_Y_A_N $(date +%H:%M:%S)" #WORKS    but the \033 breaks it 
        
        # here using an interpreted version of \033 executed by "double quotes" in "echo -e"
        #printf "%*s" $COLUMNS "[$YELLOW$(git branch 2>/dev/null | grep '^*' | sed s/..//)[01;$CYAN$(date +%H:%M:%S)" #WORKS 
        if [ find_git ] ; then 
        { 
            local _is_branch_dirty=$(is_branch_dirty_)
            # printf "%*s" $(( COLUMNS + 10 )) "$_is_branch_dirty [$Y_E_LL_O_W$(git branch 2>/dev/null | grep '^*' | sed s/..//)[01;$C_Y_A_N $(date +%H:%M:%S)" #WORKS 
            local _right_sentecce="$_is_branch_dirty [$Y_E_LL_O_W$(git branch 2>/dev/null | grep '^*' | sed s/..//)[01;$C_Y_A_N $(date +%H:%M:%S)"
            local _right_sentence_length="${#_right_sentecce}"   # get string length
            local _left_sentence="${_user}@${_current_folder}${_prompt_char}"
            local _left_sentence_length="${#_left_sentence}"   # get string length
            local _total_length=$(( _left_sentence_length + _right_sentence_length ))
            local _columns=$(( COLUMNS + _total_length ))

            
            local calculation=$(( COLUMNS ))
            #local calculation=$(( calculation - ${#_right_sentecce} ))
            #local calculation=$(( calculation - ${#_left_sentence} ))
            local compensation_for_colors_invisible_chars=30
            local calculation=$(( calculation + compensation_for_colors_invisible_chars ))

            #printf "%*s" $(( COLUMNS )) "$_right_sentence_length+$_left_sentence_length=$_total_length.$COLUMNS.$_columns$_right_sentecce" #WORKS 
            # DEBUG printf "%*s" $(( calculation )) "$calculation.$_right_sentecce.$calculation." #WORKS 
            printf "%*s" $(( calculation )) "$_right_sentecce" 
            # TODO calculation of espacing is off needs fixing 
        } 
        else 
        {
            local _is_branch_dirty=$(is_branch_dirty_)
            # printf "%*s" $(( COLUMNS + 10 )) "$_is_branch_dirty [$Y_E_LL_O_W$(git branch 2>/dev/null | grep '^*' | sed s/..//)[01;$C_Y_A_N $(date +%H:%M:%S)" #WORKS 
            local _right_sentecce="$_is_branch_dirty [$Y_E_LL_O_W$(git branch 2>/dev/null | grep '^*' | sed s/..//)[01;$C_Y_A_N $(date +%H:%M:%S)"
            local _right_sentence_length="${#_right_sentecce}"   # get string length
            local _left_sentence="${_user}@${_current_folder}${_prompt_char}"
            local _left_sentence_length="${#_left_sentence}"   # get string length
            local _total_length=$(( _left_sentence_length + _right_sentence_length ))
            local _columns=$(( COLUMNS + _total_length ))

            
            local calculation=$(( COLUMNS ))
            #local calculation=$(( calculation - ${#_right_sentecce} ))
            #local calculation=$(( calculation - ${#_left_sentence} ))
            local compensation_for_colors_invisible_chars=30
            local calculation=$(( calculation + compensation_for_colors_invisible_chars ))

            #printf "%*s" $(( COLUMNS )) "$_right_sentence_length+$_left_sentence_length=$_total_length.$COLUMNS.$_columns$_right_sentecce" #WORKS 
            # DEBUG printf "%*s" $(( calculation )) "$calculation.$_right_sentecce.$calculation." #WORKS 
            printf "%*s" $(( calculation )) "$_right_sentecce" 
            # TODO calculation of espacing is off needs fixing 
        }
        fi 
    }
    fi
 }
rightprompt2()
 {
        local _is_branch_dirty=""
        [ find_git ] && _is_branch_dirty=$(is_branch_dirty_)
        local _right_sentecce="$_is_branch_dirty [$Y_E_LL_O_W$(git branch 2>/dev/null | grep '^*' | sed s/..//)[01;$C_Y_A_N $(date +%H:%M:%S)"
        echo "$_right_sentecce" 

 }
 parse_git_dirty () {
	local STATUS='' 
	local FLAGS
    local YELLOW_OVER_DARKBLUE2=$(echo -e "\033[38;5;11m\033[48;5;18m")
    local LIGHTYELLOW=$(echo -e "\033[38;5;227m")
	FLAGS=('--porcelain') 
	if [[ "$(command git config --get oh-my-zsh.hide-dirty)" != "1" ]]
	then
		if [[ $POST_1_7_2_GIT -gt 0 ]]
		then
			FLAGS+='--ignore-submodules=dirty' 
		fi
		if [[ "$DISABLE_UNTRACKED_FILES_DIRTY" = "true" ]]
		then
			FLAGS+='--untracked-files=no' 
		fi
		STATUS=$(command git status ${FLAGS} 2> /dev/null | tail -n1) 
	fi
	if [[ -n $STATUS ]]
	then
	   printf "$LIGHTYELLOW✘$reset_color"
	else
	   printf  ""
	fi
}

 is_branch_dirty_(){
local gray242=$(echo -e "\033[38;5;242m")
local reset_color=$(echo -e "\033[00m")
 # Fetch to obtain a current status for remote
    #git fetch   >/dev/null 2>&1 # suppress stdln and errln output

		# conversion to bash
		this_prompt=$(# @Overwrite of $HOME/.oh-my-zsh/lib/git.zsh
# Outputs current branch info in prompt format
function git_prompt_info() {
  local ref
  if [[ "$(command git config --get oh-my-zsh.hide-status 2>/dev/null)" != "1" ]]; then
    ref=$(command git symbolic-ref HEAD 2> /dev/null) || \
    ref=$(command git rev-parse --short HEAD 2> /dev/null) || return 0
    echo "$reset_color$gray242${ref#refs/heads/}"
  fi
};git_prompt_info)
		this_ex=$(# @Overwrite of $HOME/.oh-my-zsh/lib/git.zsh
# Outputs current branch info in prompt format
function git_prompt_info() {
  local ref
  if [[ "$(command git config --get oh-my-zsh.hide-status 2>/dev/null)" != "1" ]]; then
    ref=$(command git symbolic-ref HEAD 2> /dev/null) || \
    ref=$(command git rev-parse --short HEAD 2> /dev/null) || return 0
    echo "$(parse_git_dirty)"
  fi
};git_prompt_info)

    this_ahead=$( # @Overwrite of https://stackoverflow.com/questions/7773939/show-git-ahead-and-behind-info-for-all-branches-including-remote_branchs
branch_ahead_and_or_behind() {
  #!/bin/bash
  # by http://github.com/jehiah
  # this prints out some branch status (similar to the '... ahead' info you get from git status)

  # example:
  # $ git branch-status
  # dns_check (ahead 1) | (behind 112) origin/master
  # master (ahead 2) | (behind 0) origin/master
  local local_branch remote_branch
  # before git 2.5-
  git for-each-ref --format="%(refname:short) %(upstream:short)" refs/heads | \

  # after git 2.5+
  #git for-each-ref --format="%(refname:short) %(push:track)" refs/heads  | \
  #  available with Git 1.9/2/0 (Q1 2014)
  #git for-each-ref --format="%(refname:short) %(upstream:trackshort)" refs/heads | \
  while read local_branch remote_branch
  do
      [ -z "$remote_branch" ] && continue
      git rev-list --left-right ${local_branch}...${remote_branch} -- 2>/dev/null >/tmp/git_upstream_status_delta || continue
      LEFT_AHEAD=$(grep -c '^<' /tmp/git_upstream_status_delta)
      RIGHT_AHEAD=$(grep -c '^>' /tmp/git_upstream_status_delta)
      echo "$local_branch (ahead $LEFT_AHEAD) | (behind $RIGHT_AHEAD) $remote_branch"
  done
};branch_ahead_and_or_behind)

local CYAN=$(echo -e "\033[01;36m")
		#eval "echo -e \"$(git_prompt_info)${ret_status##*➜} $fg[cyan]${PWD##*/}$reset_color \"" | sed 's@%@\\@g' | sed 's@\\{@\\@g' | sed 's@\\}@\\@g' | sed -e 's@\\@@g' | tr -d '()' |  sed 's:(::;s:)::'
		#eval "echo -e \"${ret_status##*➜} $fg[cyan]${PWD##*/}$reset_color $(git_prompt_info)\"" sed 's:(::;s:)::'
		#eval "echo -e \"$PS1\""  | sed 's@%@\\@g' | sed 's@\\{@\\@g' | sed 's@\\}@\\@g' | sed -e 's@\\@@g'
		# echo -e $this_prompt ${ret_status##*➜} $CYAN${PWD##*/}$this_ex$gray242 $this_ahead | sed 's@%@\\@g' | sed 's@\\{@\\@g' | sed 's@\\}@\\@g' | sed -e 's@\\@@g' | tr -d '()' |  sed 's:(::;s:)::'
		echo $this_ex 
 }
#!/bin/bash
# _options=$(shopt -op); set -exu # Save and set shell options for testing
##################
# Set the prompt #    Sourced from .bashrc
##################

# Select git info displayed, see /usr/lib/git-core/git-sh-prompt for more
export GIT_PS1_SHOWCOLORHINTS=1           # Make pretty colours inside $PS1
export GIT_PS1_SHOWDIRTYSTATE=1           # '*'=unstaged, '+'=staged
export GIT_PS1_SHOWSTASHSTATE=1           # '$'=stashed
export GIT_PS1_SHOWUNTRACKEDFILES=1       # '%'=untracked
export GIT_PS1_SHOWUPSTREAM="verbose"     # 'u='=no difference, 'u+1'=ahead by 1 commit
export GIT_PS1_STATESEPARATOR=''          # No space between branch and index status
export GIT_PS1_DESCRIBE_STYLE="describe"  # Detached HEAD style:
#  describe      relative to older annotated tag (v1.6.3.1-13-gdd42c2f)
#  contains      relative to newer annotated tag (v1.6.3.2~35)
#  branch        relative to newer tag or branch (master~4)
#  default       exactly eatching tag


# Sets prompt like:
# ravi@boxy:~/prj/sample_app[exit]$                   master*% u= | 30 Apr 22:27
_set_bash_prompt() {
  # Set left hand side of the prompt
  PS1="\u@\h:\w\$ "

  #
  # Git status
  #

  # Save current state of user shopt settings promptvars and extglob
  local user_shopt
  user_shopt=$(shopt -p promptvars extglob)
  # __git_ps1 usually returns literal text "${__git_ps1_branch_name}" rather
  # than the contained branch name, eg "master". This prevents calculating
  # the length of the printable characers in the RHS string (used to move the
  # cursor that many columns left from the terminal's right edge.) However if
  # "shopt promptvars" is unset, __git_ps1 it will include the dereferenced
  # branch name instead.
  shopt -qu promptvars
  # extglob is required for the ${variable//@(pattern)/} replacements
  shopt -qs extglob

  # Allow disabling git status and no error if __git_ps1 undefined
  if [[ ! -v _disable_git_prompt && $(type -t __git_ps1 2>/dev/null) == function ]]; then
    # __git_ps1 will only make pretty colours inside $PS1
    local old_PS1=$PS1
    __git_ps1 "" "" "%s" # force colour; no default round bracket (decorations)

    # Strip "\[" and "\[": non-printable character markers. __git_ps1 outputs
    # them however the whole of the RHS prompt needs to be included in these
    # markers, and they can't be nested.
    git=${PS1//@(\\@(\[|\]))/}
    PS1=$old_PS1
  fi

  #
  # Right hand side of prompt
  #
  local rhs="" # String to be printed on the right hand side of terminal

  # Create a string like: "25 Apr 13:15"
  local date_time
  printf -v date_time "%(%e %b %H:%M)T" -1 # -1 is current time

  # Format the RHS prompt
  [[ -n $git ]] && rhs="$git | " #"
  rhs+="\e[0;1;31m${date_time}"
  # Strip ANSI CSI commands (eg colours) to enble counting the length of
  # printable characters, giving offset of cursor from terminal RHS edge (from
  # https://www.commandlinefu.com/commands/view/12043/remove-color-special-escape-ansi-codes-from-text-with-sed)
  # Neither bash not sed support lookbehind zero-length assertions, so it's not
  # possible to ignore "\\e", (ie a literal '\' followed by a literal 'e'), yet
  # still remove "\e" (ie ESC)
  local rhs_printable=${rhs//@(\\@(\[|]|[Ee]\[*([0-9;])[a-zA-Z]))/}
  local _rightprompt2=$(rightprompt2)
rhs="$_rightprompt2"
  local rhs_printable=${rhs//@(\\@(\[|]|[Ee]\[*([0-9;])[a-zA-Z]))/}
  # or, in using sed (but requires exec):
  # local rhs_printable=$(sed -e 's,\\[][]\|\\[Ee]\[\([0-9;]\)*[A-Za-z],,g' <<< "$rhs")

  # Reference: https://en.wikipedia.org/wiki/ANSI_escape_code
  local Save='\e[s' # Save cursor position
  local Rest='\e[u' # Restore cursor to save point

  # Save cursor position, jump to (right hand edge minus N columns) where N is
  # the length of the printable RHS string. Print the RHS string, then return
  # to the saved position and print the LHS prompt.

  # Note: "\[" and "\]" are used so that bash can calculate the number of
  # printed characters so that the prompt doesn't do strange things when
  # command line editing/browsing/completion. Ensure that these are not nested.
    PS1="${_user}@${_current_folder}${_prompt_char}"
    local calculation=$(( COLUMNS - ${#rhs_printable} ))
    local compensation_for_colors_invisible_chars=30
    local calculation=$(( calculation + compensation_for_colors_invisible_chars ))
  
    #DEBUG export PS1="\[\e[0m${Save}\e[$(( calculation ))G${calculation}.${rhs}${Rest}\]${PS1}"
    export PS1="\[\e[0m${Save}\e[$(( calculation ))G${rhs}${Rest}\]${PS1}"

 
  eval "$user_shopt"

}
# end _set_bash_prompt



# eval "$_options"; unset _options # Restore previous shell options from line 2
        
# TODO calculation of espacing is off needs fixing 
PS1='\[$(tput sc; rightprompt; tput rc)\]'
export PS1="$PS1${_user}@${_current_folder}${_prompt_char}"
  
# THIS WORKS with correct spacing but git does not update when changing folders 
#_set_bash_prompt


 # Keymap keyboard fix for Norwegian Keyboard
 [ -e /lib/kbd/keymaps/i386/qwerty/no-latin1.map ] && loadkeys /lib/kbd/keymaps/i386/qwerty/no-latin1.map 

 
#END 
 
 
# PYENV
[ -e  ~/.pyenv/bin  ]  && export PATH="~/.pyenv/bin:$PATH"
( command -v pyenv >/dev/null 2>&1; ) &&  eval "$(pyenv init -)"
( command -v pyenv >/dev/null 2>&1; ) && eval "$(pyenv virtualenv-init -)"
 
