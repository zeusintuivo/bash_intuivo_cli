#!/bin/bash
#
# @author Zeus Intuivo <zeus@intuivo.com>
#
#
load_struct_testing_wget(){
    local provider="$HOME/_/clis/execute_command_intuivo_cli/struct_testing"
    [   -e "${provider}"  ] && source "${provider}"
    [ ! -e "${provider}"  ] && eval """$(wget --quiet --no-check-certificate  https://raw.githubusercontent.com/zeusintuivo/execute_command_intuivo_cli/master/struct_testing -O -  2>/dev/null )"""   # suppress only wget download messages, but keep wget output for variable
    ( ( ! command -v type passed >/dev/null 2>&1; ) && echo -e "\n \n  ERROR! Loading struct_testing \n \n " && exit 69; )
} # end load_struct_testing_wget
load_struct_testing_wget

get_lastest_studio_code_version() {
    local CODEFILE=$(curl -sSLo -  https://code.visualstudio.com/docs/?dv=linux32_deb&build=insiders  2>&1;) # suppress only wget download messages, but keep wget output for variable
    echo "${CODEFILE}" | grep 'facebook'  | head -3
    local CODELASTESTBUILD=$(echo "${CODELASTESTBUILD}" | grep 'direct download link ....' )
    wait
    [[ -z "${CODELASTESTBUILD}" ]] && failed "Visual Studio Code Version not found! :${CODELASTESTBUILD}:"
    echo "${CODELASTESTBUILD}"
}
download_studio_code(){
  # sample https://download.studio_codetext.com/studio_code-text_build-3133_amd64.deb
  if ( command -v type wget >/dev/null 2>&1; ) ; then
   wget --quiet --no-check-certificate "https://download.studio_codetext.com/${1}" 2>/dev/null   # suppress only wget download messages, but keep wget output for variable
  elif ( command -v type curl >/dev/null 2>&1; ); then
    curl -O "https://download.studio_codetext.com/${1}" 2>/dev/null   # suppress only wget download messages, but keep wget output for variable
  else
    failed "I cannot find wget or curl to download! https://download.studio_codetext.com/${1}"
  fi
}
install_darwin_lastest_studio_code_64() {
    local CODELASTESTBUILD=$(get_lastest_studio_code_version)
    local CODENAME="Visual Studio Code%20Text%20Build%20${CODELASTESTBUILD}.dmg"
    wait
    cd ~/Downloads/
    download_studio_code "${CODENAME}"
    wait
    sudo hdiutil attach ${CODENAME}
    wait
    sudo cp -R /Volumes/Visual Studio Code\ Text/Visual Studio Code\ Text.app /Applications/
    wait
    sudo hdiutil detach /Volumes/Visual Studio Code\ Text
    wait
} # end install_darwin_lastest_studio_code_64

install_linux_lastest_studio_code_64() {
    local CODELASTESTBUILD=$(get_lastest_studio_code_version)
    local CODENAME="studio_code-text_build-${CODELASTESTBUILD}_amd64.deb"
    wait
    cd ~/Downloads/
    download_studio_code "${CODENAME}"
    wait
    sudo dpkg -i ${CODENAME}
    wait
} # end install_linux_lastest_studio_code_64

install_linux_lastest_studio_code_32() {
    local CODELASTESTBUILD=$(get_lastest_studio_code_version)
    local CODENAME="studio_code-text_build-${CODELASTESTBUILD}_i386.deb"
    wait
    cd ~/Downloads/
    download_studio_code "${CODENAME}"
    wait
    sudo dpkg -i ${CODENAME}
    wait
} # end install_linux_lastest_studio_code_32

install_windows_lastest_studio_code_64() {
    local CODELASTESTBUILD=$(curl -L https://www.studio_codetext.com/3 | grep 'The latest build is ....' | cut -c61-64)
    wait
    local CODENAME="Visual Studio Code%20Text%20Build%20${CODELASTESTBUILD}%20x64%20Setup.exe"
    wait
    cd $HOMEDIR
    cd Downloads
    curl -O https://download.studio_codetext.com/${CODENAME}
    ${CODENAME}
    wait
} # end install_windows_lastest_studio_code_64

install_windows_lastest_studio_code_32() {
    local CODELASTESTBUILD=$(curl -L https://www.studio_codetext.com/3 | grep 'The latest build is ....' | cut -c61-64)
    wait
    local CODENAME="Visual Studio Code%20Text%20Build%20${CODELASTESTBUILD}%20Setup.exe"
    wait
    cd $HOMEDIR
    cd Downloads
    curl -O https://download.studio_codetext.com/${CODENAME}
    ${CODENAME}
    wait
} # end install_windows_lastest_studio_code_32

check_equality "1" "1"
get_lastest_studio_code_version
exit
# check operation systems
if [[ "$(uname)" == "Darwin" ]] ; then
  # Do something under Mac OS X platform
    [[ "$(uname -m)" == "x86_64" ]] && install_darwin_lastest_studio_code_64 "$@"
    [[ "$(uname -m)" == "i686"   ]] && install_darwin_lastest_studio_code_64 "$@"
elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]] ; then
  # Do something under GNU/Linux platform
  # ubuntu lsb_release -i | sed 's/Distributor\ ID://g' = \tUbuntu\n
    [[ "$(uname -i)" == "x86_64" ]] && install_linux_lastest_studio_code_64 "$@"
    [[ "$(uname -i)" == "i686"   ]] && install_linux_lastest_studio_code_32 "$@"
elif [[ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]] ; then
  # Do something under Windows NT platform
    [[ "$(uname -i)" == "x86_64" ]] && install_windows_lastest_studio_code_64 "$*"
    [[ "$(uname -i)" == "i686"   ]] && install_windows_lastest_studio_code_32 "$*"
  install_windows_lastest_studio_code_64 "$*"
  # nothing here
fi



